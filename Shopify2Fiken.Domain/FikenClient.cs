//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace Fiken.Sdk
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FikenClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public FikenClient(System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = "https://api.fiken.no/api/v2";
            _httpClient = httpClient;
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <remarks>
        /// Returns information about the user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Userinfo> GetUserAsync()
        {
            return GetUserAsync(System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns information about the user
        /// </remarks>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Userinfo> GetUserAsync(System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "user"
                    urlBuilder_.Append("user");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Userinfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all companies from the system that the user has access to
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Company>> GetCompaniesAsync(int? page, int? pageSize, SortBy? sortBy)
        {
            return GetCompaniesAsync(page, pageSize, sortBy, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all companies from the system that the user has access to
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Company>> GetCompaniesAsync(int? page, int? pageSize, SortBy? sortBy, System.Threading.CancellationToken cancellationToken)
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies"
                    urlBuilder_.Append("companies");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Company>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns company associated with slug.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Company> GetCompanyAsync(string companySlug)
        {
            return GetCompanyAsync(companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns company associated with slug.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Company> GetCompanyAsync(string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Company>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the bookkeeping accounts for the current year
        /// </remarks>
        /// <param name="fromAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="toAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsAsync(long? fromAccount, long? toAccount, int? page, int? pageSize, string companySlug)
        {
            return GetAccountsAsync(fromAccount, toAccount, page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the bookkeeping accounts for the current year
        /// </remarks>
        /// <param name="fromAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="toAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Account>> GetAccountsAsync(long? fromAccount, long? toAccount, int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/accounts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts");
                    urlBuilder_.Append('?');
                    if (fromAccount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fromAccount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fromAccount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (toAccount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("toAccount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(toAccount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Account>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the specified bookkeping account.
        /// <br/>An account is a string with either four digits, or four digits, a colon and five digits ("reskontro").
        /// <br/>      Examples:
        /// <br/>      3020 and 1500:10001
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="accountCode">Code number of the bookkeeping account to retrieve for the current year.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Account> GetAccountAsync(string companySlug, string accountCode)
        {
            return GetAccountAsync(companySlug, accountCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the specified bookkeping account.
        /// <br/>An account is a string with either four digits, or four digits, a colon and five digits ("reskontro").
        /// <br/>      Examples:
        /// <br/>      3020 and 1500:10001
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="accountCode">Code number of the bookkeeping account to retrieve for the current year.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Account> GetAccountAsync(string companySlug, string accountCode, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (accountCode == null)
                throw new System.ArgumentNullException("accountCode");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/accounts/{accountCode}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountCode, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Account>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the bookkeeping accounts and closing balances for a given date.
        /// <br/>An account is a string with either four digits, or four digits, a colon and five digits ("reskontro").
        /// <br/>Examples:
        /// <br/>3020 and 1500:10001
        /// </remarks>
        /// <param name="fromAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="toAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountBalance>> GetAccountBalancesAsync(long? fromAccount, long? toAccount, int? page, int? pageSize, System.DateTimeOffset date, string companySlug)
        {
            return GetAccountBalancesAsync(fromAccount, toAccount, page, pageSize, date, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the bookkeeping accounts and closing balances for a given date.
        /// <br/>An account is a string with either four digits, or four digits, a colon and five digits ("reskontro").
        /// <br/>Examples:
        /// <br/>3020 and 1500:10001
        /// </remarks>
        /// <param name="fromAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="toAccount">Filter parameter specifying which account numbers to return. Specify using the from and to parameters (excluding subaccount).</param>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AccountBalance>> GetAccountBalancesAsync(long? fromAccount, long? toAccount, int? page, int? pageSize, System.DateTimeOffset date, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (date == null)
                throw new System.ArgumentNullException("date");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/accountBalances"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accountBalances");
                    urlBuilder_.Append('?');
                    if (fromAccount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("fromAccount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(fromAccount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (toAccount != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("toAccount")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(toAccount, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<AccountBalance>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the specified bookkeping account and balance for a given date.
        /// </remarks>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="accountCode">Code number of the bookkeeping account to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<AccountBalance> GetAccountBalanceAsync(System.DateTimeOffset date, string companySlug, string accountCode)
        {
            return GetAccountBalanceAsync(date, companySlug, accountCode, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the specified bookkeping account and balance for a given date.
        /// </remarks>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="accountCode">Code number of the bookkeeping account to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AccountBalance> GetAccountBalanceAsync(System.DateTimeOffset date, string companySlug, string accountCode, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (accountCode == null)
                throw new System.ArgumentNullException("accountCode");

            if (date == null)
                throw new System.ArgumentNullException("date");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/accountBalances/{accountCode}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/accountBalances/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(accountCode, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AccountBalance>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves all bank accounts associated with the company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="inactive">Return all active bank accounts (false) or all inactive bank accounts (true).</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountResult>> GetBankAccountsAsync(int? page, int? pageSize, bool? inactive, string companySlug)
        {
            return GetBankAccountsAsync(page, pageSize, inactive, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves all bank accounts associated with the company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="inactive">Return all active bank accounts (false) or all inactive bank accounts (true).</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BankAccountResult>> GetBankAccountsAsync(int? page, int? pageSize, bool? inactive, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/bankAccounts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bankAccounts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inactive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<BankAccountResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new bank account. The Location response header returns the URL of the newly created bank account.
        /// <br/>Possible types of bank accounts are NORMAL, TAX_DEDUCTION, FOREIGN, and CREDIT_CARD. The field "foreignService" should only be filled out for accounts of type FOREIGN.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateBankAccountAsync(BankAccountRequest body, string companySlug)
        {
            return CreateBankAccountAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new bank account. The Location response header returns the URL of the newly created bank account.
        /// <br/>Possible types of bank accounts are NORMAL, TAX_DEDUCTION, FOREIGN, and CREDIT_CARD. The field "foreignService" should only be filled out for accounts of type FOREIGN.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateBankAccountAsync(BankAccountRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/bankAccounts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bankAccounts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves specified bank account.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<BankAccountResult> GetBankAccountAsync(string companySlug, long bankAccountId)
        {
            return GetBankAccountAsync(companySlug, bankAccountId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves specified bank account.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BankAccountResult> GetBankAccountAsync(string companySlug, long bankAccountId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (bankAccountId == null)
                throw new System.ArgumentNullException("bankAccountId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/bankAccounts/{bankAccountId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/bankAccounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(bankAccountId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BankAccountResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves all contacts for the specified company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="supplierNumber">Find all results with the supplier number equal to the specified parameter.</param>
        /// <param name="customerNumber">Find all results with the customer number equal to the specified parameter.</param>
        /// <param name="memberNumber">Find all results with the member number equal to the specified parameter.</param>
        /// <param name="name">Find all results with the name equal to the specified parameter.</param>
        /// <param name="organizationNumber">Find all results with the organization number equal to the specified parameter.</param>
        /// <param name="email">Find all results with the email equal to the specified parameter.</param>
        /// <param name="customer">Returns all contacts that are customers. If filter is set for both supplier and customer = true, only contacts that are both supplier and customer will be returned.</param>
        /// <param name="supplier">Returns all contacts that are suppliers. If filter is set for both supplier and customer = true, only contacts that are both supplier and customer will be returned.</param>
        /// <param name="inactive">Return all active contacts (false) or all inactive contacts (true).</param>
        /// <param name="group">Return contacts in contact group, exact match only. Groups are only used for customers, not suppliers.</param>
        /// <param name="phoneNumber">Find all results with the phone number equal to the specified parameter.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Contact>> GetContactsAsync(int? page, int? pageSize, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, int? supplierNumber, int? customerNumber, int? memberNumber, string name, string organizationNumber, string email, bool? customer, bool? supplier, bool? inactive, string group, SortBy2? sortBy, string phoneNumber, string companySlug)
        {
            return GetContactsAsync(page, pageSize, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, supplierNumber, customerNumber, memberNumber, name, organizationNumber, email, customer, supplier, inactive, group, sortBy, phoneNumber, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves all contacts for the specified company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="supplierNumber">Find all results with the supplier number equal to the specified parameter.</param>
        /// <param name="customerNumber">Find all results with the customer number equal to the specified parameter.</param>
        /// <param name="memberNumber">Find all results with the member number equal to the specified parameter.</param>
        /// <param name="name">Find all results with the name equal to the specified parameter.</param>
        /// <param name="organizationNumber">Find all results with the organization number equal to the specified parameter.</param>
        /// <param name="email">Find all results with the email equal to the specified parameter.</param>
        /// <param name="customer">Returns all contacts that are customers. If filter is set for both supplier and customer = true, only contacts that are both supplier and customer will be returned.</param>
        /// <param name="supplier">Returns all contacts that are suppliers. If filter is set for both supplier and customer = true, only contacts that are both supplier and customer will be returned.</param>
        /// <param name="inactive">Return all active contacts (false) or all inactive contacts (true).</param>
        /// <param name="group">Return contacts in contact group, exact match only. Groups are only used for customers, not suppliers.</param>
        /// <param name="phoneNumber">Find all results with the phone number equal to the specified parameter.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Contact>> GetContactsAsync(int? page, int? pageSize, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, int? supplierNumber, int? customerNumber, int? memberNumber, string name, string organizationNumber, string email, bool? customer, bool? supplier, bool? inactive, string group, SortBy2? sortBy, string phoneNumber, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModified")).Append('=').Append(System.Uri.EscapeDataString(lastModified.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDate")).Append('=').Append(System.Uri.EscapeDataString(createdDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLe")).Append('=').Append(System.Uri.EscapeDataString(createdDateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLt")).Append('=').Append(System.Uri.EscapeDataString(createdDateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGe")).Append('=').Append(System.Uri.EscapeDataString(createdDateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGt")).Append('=').Append(System.Uri.EscapeDataString(createdDateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (supplierNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("supplierNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(supplierNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("customerNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (memberNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("memberNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(memberNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (organizationNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("organizationNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(organizationNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (email != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("email")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customer != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("customer")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customer, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (supplier != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("supplier")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(supplier, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (inactive != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("inactive")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(inactive, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (group != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("group")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(group, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (phoneNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("phoneNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(phoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Contact>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new contact. The Location response header returns the URL of the newly created contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateContactAsync(Contact body, string companySlug)
        {
            return CreateContactAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new contact. The Location response header returns the URL of the newly created contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateContactAsync(Contact body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves specified contact. ContactId is returned with a GET contacts call as the first returned field.
        /// <br/>ContactId is returned in the Location response header for POST contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Contact> GetContactAsync(string companySlug, long contactId)
        {
            return GetContactAsync(companySlug, contactId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves specified contact. ContactId is returned with a GET contacts call as the first returned field.
        /// <br/>ContactId is returned in the Location response header for POST contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Contact> GetContactAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Contact>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates an existing contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateContactAsync(Contact body, string companySlug, long contactId)
        {
            return UpdateContactAsync(body, companySlug, contactId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates an existing contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateContactAsync(Contact body, string companySlug, long contactId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Deletes the contact if possible (no associated journal entries/sales/invoices/etc). If not possible to delete will set the contact to inactive
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Contact set to inactive because it has associated journal entries/sales/invoices/etc.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Contact> DeleteContactAsync(string companySlug, long contactId)
        {
            return DeleteContactAsync(companySlug, contactId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deletes the contact if possible (no associated journal entries/sales/invoices/etc). If not possible to delete will set the contact to inactive
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Contact set to inactive because it has associated journal entries/sales/invoices/etc.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Contact> DeleteContactAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("Contact deleted successfully.", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Contact>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment/document to a contact
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToContactAsync(string companySlug, long contactId, string filename, string comment, FileParameter file)
        {
            return AddAttachmentToContactAsync(companySlug, contactId, filename, comment, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment/document to a contact
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToContactAsync(string companySlug, long contactId, string filename, string comment, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (comment == null)
                        throw new System.ArgumentNullException("comment");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(comment, System.Globalization.CultureInfo.InvariantCulture)), "comment");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves contact person(s) for a specified contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactPerson>> GetContactContactPersonAsync(string companySlug, long contactId)
        {
            return GetContactContactPersonAsync(companySlug, contactId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves contact person(s) for a specified contact.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ContactPerson>> GetContactContactPersonAsync(string companySlug, long contactId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}/contactPerson"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contactPerson");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ContactPerson>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Adds a new contact person to a contact
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddContactPersonToContactAsync(ContactPerson body, string companySlug, long contactId)
        {
            return AddContactPersonToContactAsync(body, companySlug, contactId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Adds a new contact person to a contact
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddContactPersonToContactAsync(ContactPerson body, string companySlug, long contactId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}/contactPerson"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contactPerson");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves specified contact person
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactPerson> GetContactPersonAsync(string companySlug, long contactId, long contactPersonId)
        {
            return GetContactPersonAsync(companySlug, contactId, contactPersonId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves specified contact person
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactPerson> GetContactPersonAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            if (contactPersonId == null)
                throw new System.ArgumentNullException("contactPersonId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contactPerson/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactPersonId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactPerson>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates an existing contact person.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateContactContactPersonAsync(ContactPerson body, string companySlug, long contactId, long contactPersonId)
        {
            return UpdateContactContactPersonAsync(body, companySlug, contactId, contactPersonId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates an existing contact person.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateContactContactPersonAsync(ContactPerson body, string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            if (contactPersonId == null)
                throw new System.ArgumentNullException("contactPersonId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contactPerson/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactPersonId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete a contact's contact person.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteContactContactPersonAsync(string companySlug, long contactId, long contactPersonId)
        {
            return DeleteContactContactPersonAsync(companySlug, contactId, contactPersonId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete a contact's contact person.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteContactContactPersonAsync(string companySlug, long contactId, long contactPersonId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            if (contactPersonId == null)
                throw new System.ArgumentNullException("contactPersonId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/contacts/{contactId}/contactPerson/{contactPersonId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contacts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/contactPerson/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(contactPersonId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all customer groups for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetGroupsAsync(int? page, int? pageSize, string companySlug)
        {
            return GetGroupsAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all customer groups for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> GetGroupsAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/groups"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/groups");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a report based on provided specifications.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductSalesReportResult>> CreateProductSalesReportAsync(ProductSalesReportRequest body, string companySlug)
        {
            return CreateProductSalesReportAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a report based on provided specifications.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProductSalesReportResult>> CreateProductSalesReportAsync(ProductSalesReportRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/products/salesReport"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products/salesReport");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProductSalesReportResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all general journal entries (posteringer) for the specified company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JournalEntry>> GetJournalEntriesAsync(int? page, int? pageSize, System.DateTimeOffset? date, System.DateTimeOffset? dateLe, System.DateTimeOffset? dateLt, System.DateTimeOffset? dateGe, System.DateTimeOffset? dateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, string companySlug)
        {
            return GetJournalEntriesAsync(page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all general journal entries (posteringer) for the specified company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JournalEntry>> GetJournalEntriesAsync(int? page, int? pageSize, System.DateTimeOffset? date, System.DateTimeOffset? dateLe, System.DateTimeOffset? dateLt, System.DateTimeOffset? dateGe, System.DateTimeOffset? dateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/journalEntries"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/journalEntries");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateLe")).Append('=').Append(System.Uri.EscapeDataString(dateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateLt")).Append('=').Append(System.Uri.EscapeDataString(dateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateGe")).Append('=').Append(System.Uri.EscapeDataString(dateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateGt")).Append('=').Append(System.Uri.EscapeDataString(dateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModified")).Append('=').Append(System.Uri.EscapeDataString(lastModified.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDate")).Append('=').Append(System.Uri.EscapeDataString(createdDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLe")).Append('=').Append(System.Uri.EscapeDataString(createdDateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLt")).Append('=').Append(System.Uri.EscapeDataString(createdDateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGe")).Append('=').Append(System.Uri.EscapeDataString(createdDateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGt")).Append('=').Append(System.Uri.EscapeDataString(createdDateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<JournalEntry>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new general journal entry (fri postering).
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateGeneralJournalEntryAsync(GeneralJournalEntryRequest body, string companySlug)
        {
            return CreateGeneralJournalEntryAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new general journal entry (fri postering).
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateGeneralJournalEntryAsync(GeneralJournalEntryRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/generalJournalEntries"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/generalJournalEntries");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all journal entries within a given company's Journal Entry Service
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<JournalEntry> GetJournalEntryAsync(string companySlug, long journalEntryId)
        {
            return GetJournalEntryAsync(companySlug, journalEntryId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all journal entries within a given company's Journal Entry Service
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<JournalEntry> GetJournalEntryAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (journalEntryId == null)
                throw new System.ArgumentNullException("journalEntryId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/journalEntries/{journalEntryId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/journalEntries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(journalEntryId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<JournalEntry>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for a given Journal Entry
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetJournalEntryAttachmentsAsync(string companySlug, long journalEntryId)
        {
            return GetJournalEntryAttachmentsAsync(companySlug, journalEntryId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for a given Journal Entry
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetJournalEntryAttachmentsAsync(string companySlug, long journalEntryId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (journalEntryId == null)
                throw new System.ArgumentNullException("journalEntryId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/journalEntries/{journalEntryId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/journalEntries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(journalEntryId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to a Journal Entry
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToJournalEntryAsync(string companySlug, long journalEntryId, string filename, FileParameter file)
        {
            return AddAttachmentToJournalEntryAsync(companySlug, journalEntryId, filename, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to a Journal Entry
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToJournalEntryAsync(string companySlug, long journalEntryId, string filename, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (journalEntryId == null)
                throw new System.ArgumentNullException("journalEntryId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/journalEntries/{journalEntryId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/journalEntries/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(journalEntryId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all transactions for the specified company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transaction>> GetTransactionsAsync(int? page, int? pageSize, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, string companySlug)
        {
            return GetTransactionsAsync(page, pageSize, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all transactions for the specified company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Transaction>> GetTransactionsAsync(int? page, int? pageSize, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/transactions"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModified")).Append('=').Append(System.Uri.EscapeDataString(lastModified.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDate")).Append('=').Append(System.Uri.EscapeDataString(createdDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLe")).Append('=').Append(System.Uri.EscapeDataString(createdDateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLt")).Append('=').Append(System.Uri.EscapeDataString(createdDateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGe")).Append('=').Append(System.Uri.EscapeDataString(createdDateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGt")).Append('=').Append(System.Uri.EscapeDataString(createdDateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Transaction>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns given transaction with associated id. Transaction id is returned in GET calls for
        /// <br/>sales, purchases, and journal entries.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Transaction> GetTransactionAsync(string companySlug, long transactionId)
        {
            return GetTransactionAsync(companySlug, transactionId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns given transaction with associated id. Transaction id is returned in GET calls for
        /// <br/>sales, purchases, and journal entries.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Transaction> GetTransactionAsync(string companySlug, long transactionId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (transactionId == null)
                throw new System.ArgumentNullException("transactionId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/transactions/{transactionId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/transactions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(transactionId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Transaction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all invoices for given company. You can filter based on issue date, last modified date, customer ID, and if the invoice is settled or not.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="customerId">Returns only invoices sent to specified customer. Must be the contactId provided by a GET contacts call.</param>
        /// <param name="settled">When set to true, returns only invoices that have been settled. Otherwise false returns all invoices
        /// <br/>that have not been fully settled.</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice</param>
        /// <param name="invoiceDraftUuid">Filter based on the UUID of the invoice draft that was used to create a given invoice</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceResult>> GetInvoicesAsync(int? page, int? pageSize, System.DateTimeOffset? issueDate, System.DateTimeOffset? issueDateLe, System.DateTimeOffset? issueDateLt, System.DateTimeOffset? issueDateGe, System.DateTimeOffset? issueDateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, long? customerId, bool? settled, string orderReference, System.Guid? invoiceDraftUuid, string invoiceNumber, string companySlug)
        {
            return GetInvoicesAsync(page, pageSize, issueDate, issueDateLe, issueDateLt, issueDateGe, issueDateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, customerId, settled, orderReference, invoiceDraftUuid, invoiceNumber, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all invoices for given company. You can filter based on issue date, last modified date, customer ID, and if the invoice is settled or not.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="customerId">Returns only invoices sent to specified customer. Must be the contactId provided by a GET contacts call.</param>
        /// <param name="settled">When set to true, returns only invoices that have been settled. Otherwise false returns all invoices
        /// <br/>that have not been fully settled.</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice</param>
        /// <param name="invoiceDraftUuid">Filter based on the UUID of the invoice draft that was used to create a given invoice</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceResult>> GetInvoicesAsync(int? page, int? pageSize, System.DateTimeOffset? issueDate, System.DateTimeOffset? issueDateLe, System.DateTimeOffset? issueDateLt, System.DateTimeOffset? issueDateGe, System.DateTimeOffset? issueDateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, long? customerId, bool? settled, string orderReference, System.Guid? invoiceDraftUuid, string invoiceNumber, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDate")).Append('=').Append(System.Uri.EscapeDataString(issueDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateLe")).Append('=').Append(System.Uri.EscapeDataString(issueDateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateLt")).Append('=').Append(System.Uri.EscapeDataString(issueDateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateGe")).Append('=').Append(System.Uri.EscapeDataString(issueDateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateGt")).Append('=').Append(System.Uri.EscapeDataString(issueDateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModified")).Append('=').Append(System.Uri.EscapeDataString(lastModified.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("customerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (settled != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("settled")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(settled, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderReference != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderReference")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (invoiceDraftUuid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("invoiceDraftUuid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(invoiceDraftUuid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (invoiceNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("invoiceNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(invoiceNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoiceResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an invoice. This corresponds to "Ny faktura" in Fiken.
        /// <br/>There are two types of invoice lines that can be added to an invoice line: product line or free text line.
        /// <br/>Provide a product Id if you are invoicing a product. All information regarding the price and VAT for this product will be added to the invoice.
        /// <br/>It is however also possible to override the unit amount by sending information in both fields "productId" and "unitAmount".
        /// <br/>An invoice line can also be a free text line meaning that no existing product will be associated with the invoiced line.
        /// <br/>In this case all information regarding the price and VAT of the product or service to be invoiced must be provided.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateInvoiceAsync(InvoiceRequest body, string companySlug)
        {
            return CreateInvoiceAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an invoice. This corresponds to "Ny faktura" in Fiken.
        /// <br/>There are two types of invoice lines that can be added to an invoice line: product line or free text line.
        /// <br/>Provide a product Id if you are invoicing a product. All information regarding the price and VAT for this product will be added to the invoice.
        /// <br/>It is however also possible to override the unit amount by sending information in both fields "productId" and "unitAmount".
        /// <br/>An invoice line can also be a free text line meaning that no existing product will be associated with the invoiced line.
        /// <br/>In this case all information regarding the price and VAT of the product or service to be invoiced must be provided.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateInvoiceAsync(InvoiceRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns invoice with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InvoiceResult> GetInvoiceAsync(string companySlug, long invoiceId)
        {
            return GetInvoiceAsync(companySlug, invoiceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns invoice with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InvoiceResult> GetInvoiceAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (invoiceId == null)
                throw new System.ArgumentNullException("invoiceId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/{invoiceId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvoiceResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates invoice with provided id. It is possible to update the due date of an invoice
        /// <br/>as well as if the invoice was sent manually, outside of Fiken.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateInvoiceAsync(UpdateInvoiceRequest body, string companySlug, long invoiceId)
        {
            return UpdateInvoiceAsync(body, companySlug, invoiceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates invoice with provided id. It is possible to update the due date of an invoice
        /// <br/>as well as if the invoice was sent manually, outside of Fiken.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateInvoiceAsync(UpdateInvoiceRequest body, string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (invoiceId == null)
                throw new System.ArgumentNullException("invoiceId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/{invoiceId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for a given Invoice
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetInvoiceAttachmentsAsync(string companySlug, long invoiceId)
        {
            return GetInvoiceAttachmentsAsync(companySlug, invoiceId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for a given Invoice
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetInvoiceAttachmentsAsync(string companySlug, long invoiceId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (invoiceId == null)
                throw new System.ArgumentNullException("invoiceId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/{invoiceId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to an Invoice
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToInvoiceAsync(string companySlug, long invoiceId, string filename, FileParameter file)
        {
            return AddAttachmentToInvoiceAsync(companySlug, invoiceId, filename, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to an Invoice
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="invoiceId">The invoiceId (primary key of the returned object) is returned in the GET all
        /// <br/>invoices call; not to be confused with invoiceNumber</param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToInvoiceAsync(string companySlug, long invoiceId, string filename, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (invoiceId == null)
                throw new System.ArgumentNullException("invoiceId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/{invoiceId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(invoiceId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Sends the specified document
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Sent</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SendInvoiceAsync(SendInvoiceRequest body, string companySlug)
        {
            return SendInvoiceAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Sends the specified document
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Sent</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SendInvoiceAsync(SendInvoiceRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/send"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/send");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the counter for invoices if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Counter> GetInvoiceCounterAsync(string companySlug)
        {
            return GetInvoiceCounterAsync(companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the counter for invoices if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Counter> GetInvoiceCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Counter>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates the first invoice number which is then increased by one with every new invoice. By sending an empty request body the default is base number 10000 (the first invoice number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateInvoiceCounterAsync(Counter body, string companySlug)
        {
            return CreateInvoiceCounterAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates the first invoice number which is then increased by one with every new invoice. By sending an empty request body the default is base number 10000 (the first invoice number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateInvoiceCounterAsync(Counter body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all invoice drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice draft</param>
        /// <param name="uuid">Filter based on the UUID of the draft.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetInvoiceDraftsAsync(int? page, int? pageSize, string orderReference, System.Guid? uuid, string companySlug)
        {
            return GetInvoiceDraftsAsync(page, pageSize, orderReference, uuid, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all invoice drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="orderReference">Filter based on order reference for a given invoice draft</param>
        /// <param name="uuid">Filter based on the UUID of the draft.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetInvoiceDraftsAsync(int? page, int? pageSize, string orderReference, System.Guid? uuid, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (orderReference != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("orderReference")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(orderReference, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (uuid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("uuid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(uuid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoiceishDraftResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an invoice draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateInvoiceDraftAsync(InvoiceishDraftRequest body, string companySlug)
        {
            return CreateInvoiceDraftAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an invoice draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateInvoiceDraftAsync(InvoiceishDraftRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns invoice draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InvoiceishDraftResult> GetInvoiceDraftAsync(string companySlug, long draftId)
        {
            return GetInvoiceDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns invoice draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InvoiceishDraftResult> GetInvoiceDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvoiceishDraftResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates invoice draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateInvoiceDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId)
        {
            return UpdateInvoiceDraftAsync(body, companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates invoice draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateInvoiceDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete invoice draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteInvoiceDraftAsync(string companySlug, long draftId)
        {
            return DeleteInvoiceDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete invoice draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteInvoiceDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetInvoiceDraftAttachmentsAsync(string companySlug, long draftId)
        {
            return GetInvoiceDraftAttachmentsAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetInvoiceDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to an invoice draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToInvoiceDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file)
        {
            return AddAttachmentToInvoiceDraftAsync(companySlug, draftId, filename, comment, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to an invoice draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToInvoiceDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (comment == null)
                        throw new System.ArgumentNullException("comment");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(comment, System.Globalization.CultureInfo.InvariantCulture)), "comment");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an invoice from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateInvoiceFromDraftAsync(string companySlug, long draftId)
        {
            return CreateInvoiceFromDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an invoice from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateInvoiceFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/invoices/drafts/{draftId}/createInvoice"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/invoices/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createInvoice");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all credit notes for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="customerId">Returns only credit notes sent to specified customer. Must be the contactId provided by a GET contacts call.</param>
        /// <param name="settled">When set to true, returns only credit notes that have been settled. Otherwise false returns all credit notes
        /// <br/>that have not been fully settled.</param>
        /// <param name="creditNoteDraftUuid">Filter based on the UUID of the credit note draft that was used to create a given invoice. Applies only to "uavhengig kreditnotaer".</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreditNoteResult>> GetCreditNotesAsync(int? page, int? pageSize, System.DateTimeOffset? issueDate, System.DateTimeOffset? issueDateLe, System.DateTimeOffset? issueDateLt, System.DateTimeOffset? issueDateGe, System.DateTimeOffset? issueDateGt, long? customerId, bool? settled, System.Guid? creditNoteDraftUuid, string companySlug)
        {
            return GetCreditNotesAsync(page, pageSize, issueDate, issueDateLe, issueDateLt, issueDateGe, issueDateGt, customerId, settled, creditNoteDraftUuid, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all credit notes for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="issueDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="issueDateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="customerId">Returns only credit notes sent to specified customer. Must be the contactId provided by a GET contacts call.</param>
        /// <param name="settled">When set to true, returns only credit notes that have been settled. Otherwise false returns all credit notes
        /// <br/>that have not been fully settled.</param>
        /// <param name="creditNoteDraftUuid">Filter based on the UUID of the credit note draft that was used to create a given invoice. Applies only to "uavhengig kreditnotaer".</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CreditNoteResult>> GetCreditNotesAsync(int? page, int? pageSize, System.DateTimeOffset? issueDate, System.DateTimeOffset? issueDateLe, System.DateTimeOffset? issueDateLt, System.DateTimeOffset? issueDateGe, System.DateTimeOffset? issueDateGt, long? customerId, bool? settled, System.Guid? creditNoteDraftUuid, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDate")).Append('=').Append(System.Uri.EscapeDataString(issueDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateLe")).Append('=').Append(System.Uri.EscapeDataString(issueDateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateLt")).Append('=').Append(System.Uri.EscapeDataString(issueDateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateGe")).Append('=').Append(System.Uri.EscapeDataString(issueDateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (issueDateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("issueDateGt")).Append('=').Append(System.Uri.EscapeDataString(issueDateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (customerId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("customerId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (settled != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("settled")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(settled, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (creditNoteDraftUuid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("creditNoteDraftUuid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(creditNoteDraftUuid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CreditNoteResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new credit note that covers the full amount of the associated invoice.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateFullCreditNoteAsync(FullCreditNoteRequest body, string companySlug)
        {
            return CreateFullCreditNoteAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new credit note that covers the full amount of the associated invoice.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateFullCreditNoteAsync(FullCreditNoteRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/full"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/full");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new credit note that doesn't fully cover the total amount of the associated invoice.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreatePartialCreditNoteAsync(PartialCreditNoteRequest body, string companySlug)
        {
            return CreatePartialCreditNoteAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new credit note that doesn't fully cover the total amount of the associated invoice.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreatePartialCreditNoteAsync(PartialCreditNoteRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/partial"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/partial");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns credit note with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="creditNoteId">The creditNoteId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>credit notes call; not to be confused with creditNoteNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreditNoteResult> GetCreditNoteAsync(string companySlug, string creditNoteId)
        {
            return GetCreditNoteAsync(companySlug, creditNoteId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns credit note with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="creditNoteId">The creditNoteId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>credit notes call; not to be confused with creditNoteNumber</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreditNoteResult> GetCreditNoteAsync(string companySlug, string creditNoteId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (creditNoteId == null)
                throw new System.ArgumentNullException("creditNoteId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/{creditNoteId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(creditNoteId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreditNoteResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Sends the specified document
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Sent</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task SendCreditNoteAsync(SendCreditNoteRequest body, string companySlug)
        {
            return SendCreditNoteAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Sends the specified document
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Sent</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task SendCreditNoteAsync(SendCreditNoteRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/send"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/send");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the counter for credit notes if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Counter> GetCreditNoteCounterAsync(string companySlug)
        {
            return GetCreditNoteCounterAsync(companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the counter for credit notes if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Counter> GetCreditNoteCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Counter>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates the first credit note number which is then increased by one with every new credit note. By sending an empty request body the default is base number 10000 (the first credit note number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateCreditNoteCounterAsync(Counter body, string companySlug)
        {
            return CreateCreditNoteCounterAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates the first credit note number which is then increased by one with every new credit note. By sending an empty request body the default is base number 10000 (the first credit note number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateCreditNoteCounterAsync(Counter body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all credit note drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetCreditNoteDraftsAsync(int? page, int? pageSize, string companySlug)
        {
            return GetCreditNoteDraftsAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all credit note drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetCreditNoteDraftsAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoiceishDraftResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a credit note draft. This draft corresponds to a draft for an "uavhengig kreditnota" in Fiken.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateCreditNoteDraftAsync(InvoiceishDraftRequest body, string companySlug)
        {
            return CreateCreditNoteDraftAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a credit note draft. This draft corresponds to a draft for an "uavhengig kreditnota" in Fiken.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateCreditNoteDraftAsync(InvoiceishDraftRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns credit note draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InvoiceishDraftResult> GetCreditNoteDraftAsync(string companySlug, long draftId)
        {
            return GetCreditNoteDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns credit note draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InvoiceishDraftResult> GetCreditNoteDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvoiceishDraftResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates credit note draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateCreditNoteDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId)
        {
            return UpdateCreditNoteDraftAsync(body, companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates credit note draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateCreditNoteDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete credit note draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteCreditNoteDraftAsync(string companySlug, long draftId)
        {
            return DeleteCreditNoteDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete credit note draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteCreditNoteDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetCreditNoteDraftAttachmentsAsync(string companySlug, long draftId)
        {
            return GetCreditNoteDraftAttachmentsAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetCreditNoteDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to a credit note draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToCreditNoteDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file)
        {
            return AddAttachmentToCreditNoteDraftAsync(companySlug, draftId, filename, comment, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to a credit note draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToCreditNoteDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (comment == null)
                        throw new System.ArgumentNullException("comment");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(comment, System.Globalization.CultureInfo.InvariantCulture)), "comment");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a credit note from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateCreditNoteFromDraftAsync(string companySlug, long draftId)
        {
            return CreateCreditNoteFromDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a credit note from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateCreditNoteFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/creditNotes/drafts/{draftId}/createCreditNote"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/creditNotes/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createCreditNote");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all offers for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Offer>> GetOffersAsync(int? page, int? pageSize, string companySlug)
        {
            return GetOffersAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all offers for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Offer>> GetOffersAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Offer>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns offer with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="offerId">The offerId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>offers call</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Offer> GetOfferAsync(string companySlug, string offerId)
        {
            return GetOfferAsync(companySlug, offerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns offer with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="offerId">The offerId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>offers call</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Offer> GetOfferAsync(string companySlug, string offerId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (offerId == null)
                throw new System.ArgumentNullException("offerId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/{offerId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(offerId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Offer>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the counter for offers if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Counter> GetOfferCounterAsync(string companySlug)
        {
            return GetOfferCounterAsync(companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the counter for offers if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Counter> GetOfferCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Counter>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates the first offer number which is then increased by one with every new offer. By sending an empty request body the default is base number (the first offer number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateOfferCounterAsync(Counter body, string companySlug)
        {
            return CreateOfferCounterAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates the first offer number which is then increased by one with every new offer. By sending an empty request body the default is base number (the first offer number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOfferCounterAsync(Counter body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all offer drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetOfferDraftsAsync(int? page, int? pageSize, string companySlug)
        {
            return GetOfferDraftsAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all offer drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetOfferDraftsAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoiceishDraftResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an offer draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateOfferDraftAsync(InvoiceishDraftRequest body, string companySlug)
        {
            return CreateOfferDraftAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an offer draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOfferDraftAsync(InvoiceishDraftRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns offer draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InvoiceishDraftResult> GetOfferDraftAsync(string companySlug, long draftId)
        {
            return GetOfferDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns offer draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InvoiceishDraftResult> GetOfferDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvoiceishDraftResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates offer draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateOfferDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId)
        {
            return UpdateOfferDraftAsync(body, companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates offer draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateOfferDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete offer draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteOfferDraftAsync(string companySlug, long draftId)
        {
            return DeleteOfferDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete offer draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteOfferDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetOfferDraftAttachmentsAsync(string companySlug, long draftId)
        {
            return GetOfferDraftAttachmentsAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetOfferDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to an offer draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToOfferDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file)
        {
            return AddAttachmentToOfferDraftAsync(companySlug, draftId, filename, comment, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to an offer draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToOfferDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (comment == null)
                        throw new System.ArgumentNullException("comment");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(comment, System.Globalization.CultureInfo.InvariantCulture)), "comment");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an offer from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateOfferFromDraftAsync(string companySlug, long draftId)
        {
            return CreateOfferFromDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an offer from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOfferFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/offers/drafts/{draftId}/createOffer"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/offers/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createOffer");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all order confirmations for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderConfirmation>> GetOrderConfirmationsAsync(int? page, int? pageSize, string companySlug)
        {
            return GetOrderConfirmationsAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all order confirmations for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrderConfirmation>> GetOrderConfirmationsAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<OrderConfirmation>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns order confirmation with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="confirmationId">The confirmationId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>order confirmations call</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<OrderConfirmation> GetOrderConfirmationAsync(string companySlug, string confirmationId)
        {
            return GetOrderConfirmationAsync(companySlug, confirmationId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns order confirmation with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="confirmationId">The confirmationId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>order confirmations call</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<OrderConfirmation> GetOrderConfirmationAsync(string companySlug, string confirmationId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (confirmationId == null)
                throw new System.ArgumentNullException("confirmationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/{confirmationId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(confirmationId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<OrderConfirmation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Retrieves the counter for order confirmations if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Counter> GetOrderConfirmationCounterAsync(string companySlug)
        {
            return GetOrderConfirmationCounterAsync(companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieves the counter for order confirmations if it has been created
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Counter> GetOrderConfirmationCounterAsync(string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Counter>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates the first order confirmation number which is then increased by one with every new order confirmation. By sending an empty request body the default is base number (the first order confirmation number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateOrderConfirmationCounterAsync(Counter body, string companySlug)
        {
            return CreateOrderConfirmationCounterAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates the first order confirmation number which is then increased by one with every new order confirmation. By sending an empty request body the default is base number (the first order confirmation number will thus be 10001), but can be specified to another starting value.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrderConfirmationCounterAsync(Counter body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/counter"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/counter");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an invoice draft from an order confirmation
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="confirmationId">The confirmationId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>order confirmations call</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateInvoiceDraftFromOrderConfirmationAsync(string companySlug, string confirmationId)
        {
            return CreateInvoiceDraftFromOrderConfirmationAsync(companySlug, confirmationId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an invoice draft from an order confirmation
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="confirmationId">The confirmationId (primary key of the returned object) is returned as the first field in the GET all
        /// <br/>order confirmations call</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateInvoiceDraftFromOrderConfirmationAsync(string companySlug, string confirmationId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (confirmationId == null)
                throw new System.ArgumentNullException("confirmationId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/{confirmationId}/createInvoiceDraft"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(confirmationId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createInvoiceDraft");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all order confirmation drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetOrderConfirmationDraftsAsync(int? page, int? pageSize, string companySlug)
        {
            return GetOrderConfirmationDraftsAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all order confirmation drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InvoiceishDraftResult>> GetOrderConfirmationDraftsAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InvoiceishDraftResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an order confirmation draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateOrderConfirmationDraftAsync(InvoiceishDraftRequest body, string companySlug)
        {
            return CreateOrderConfirmationDraftAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an order confirmation draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrderConfirmationDraftAsync(InvoiceishDraftRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns order confirmation draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InvoiceishDraftResult> GetOrderConfirmationDraftAsync(string companySlug, long draftId)
        {
            return GetOrderConfirmationDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns order confirmation draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InvoiceishDraftResult> GetOrderConfirmationDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InvoiceishDraftResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates order confirmation draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateOrderConfirmationDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId)
        {
            return UpdateOrderConfirmationDraftAsync(body, companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates order confirmation draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateOrderConfirmationDraftAsync(InvoiceishDraftRequest body, string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete order confirmation draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteOrderConfirmationDraftAsync(string companySlug, long draftId)
        {
            return DeleteOrderConfirmationDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete order confirmation draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteOrderConfirmationDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetOrderConfirmationDraftAttachmentsAsync(string companySlug, long draftId)
        {
            return GetOrderConfirmationDraftAttachmentsAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetOrderConfirmationDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to an order confirmation draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToOrderConfirmationDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file)
        {
            return AddAttachmentToOrderConfirmationDraftAsync(companySlug, draftId, filename, comment, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to an order confirmation draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="comment">Not required.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToOrderConfirmationDraftAsync(string companySlug, long draftId, string filename, string comment, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (comment == null)
                        throw new System.ArgumentNullException("comment");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(comment, System.Globalization.CultureInfo.InvariantCulture)), "comment");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates an order confirmation from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateOrderConfirmationFromDraftAsync(string companySlug, long draftId)
        {
            return CreateOrderConfirmationFromDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates an order confirmation from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateOrderConfirmationFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/orderConfirmations/drafts/{draftId}/createOrderConfirmation"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/orderConfirmations/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createOrderConfirmation");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all products for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="name">Find all results with product name equal to the specified parameter.</param>
        /// <param name="productNumber">Find all results with product number (varenummer) equal to the specified parameter.</param>
        /// <param name="active">Returns active (true) or inactive (false) products.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Product>> GetProductsAsync(int? page, int? pageSize, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, string name, string productNumber, bool? active, string companySlug)
        {
            return GetProductsAsync(page, pageSize, createdDate, createdDateLe, createdDateLt, createdDateGe, createdDateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, name, productNumber, active, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all products for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="createdDate">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLe">Returns results that were created before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateLt">Returns results that were created strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGe">Returns results that were created after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="createdDateGt">Returns results that were created strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="name">Find all results with product name equal to the specified parameter.</param>
        /// <param name="productNumber">Find all results with product number (varenummer) equal to the specified parameter.</param>
        /// <param name="active">Returns active (true) or inactive (false) products.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Product>> GetProductsAsync(int? page, int? pageSize, System.DateTimeOffset? createdDate, System.DateTimeOffset? createdDateLe, System.DateTimeOffset? createdDateLt, System.DateTimeOffset? createdDateGe, System.DateTimeOffset? createdDateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, string name, string productNumber, bool? active, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/products"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDate != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDate")).Append('=').Append(System.Uri.EscapeDataString(createdDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLe")).Append('=').Append(System.Uri.EscapeDataString(createdDateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateLt")).Append('=').Append(System.Uri.EscapeDataString(createdDateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGe")).Append('=').Append(System.Uri.EscapeDataString(createdDateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (createdDateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("createdDateGt")).Append('=').Append(System.Uri.EscapeDataString(createdDateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModified")).Append('=').Append(System.Uri.EscapeDataString(lastModified.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (productNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("productNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(productNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (active != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("active")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(active, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Product>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new product.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateProductAsync(Product body, string companySlug)
        {
            return CreateProductAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new product.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateProductAsync(Product body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/products"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns product with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="productId">The productId (primary key of the returned object) is returned in the GET all
        /// <br/>products call; not to be confused with productNumber.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Product> GetProductAsync(string companySlug, long productId)
        {
            return GetProductAsync(companySlug, productId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns product with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="productId">The productId (primary key of the returned object) is returned in the GET all
        /// <br/>products call; not to be confused with productNumber.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Product> GetProductAsync(string companySlug, long productId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (productId == null)
                throw new System.ArgumentNullException("productId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/products/{productId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Product>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates an existing product.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="productId">The productId (primary key of the returned object) is returned in the GET all
        /// <br/>products call; not to be confused with productNumber.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateProductAsync(Product body, string companySlug, long productId)
        {
            return UpdateProductAsync(body, companySlug, productId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates an existing product.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="productId">The productId (primary key of the returned object) is returned in the GET all
        /// <br/>products call; not to be confused with productNumber.</param>
        /// <returns>Updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateProductAsync(Product body, string companySlug, long productId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (productId == null)
                throw new System.ArgumentNullException("productId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/products/{productId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete product with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="productId">The productId (primary key of the returned object) is returned in the GET all
        /// <br/>products call; not to be confused with productNumber.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteProductAsync(string companySlug, long productId)
        {
            return DeleteProductAsync(companySlug, productId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete product with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="productId">The productId (primary key of the returned object) is returned in the GET all
        /// <br/>products call; not to be confused with productNumber.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProductAsync(string companySlug, long productId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (productId == null)
                throw new System.ArgumentNullException("productId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/products/{productId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/products/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(productId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all sales for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="saleNumber">Find all results with the sale number equal to the specified parameter.</param>
        /// <param name="settled">When set to true, returns only sales that have been settled. Otherwise false returns all sales
        /// <br/>that have not been fully settled.</param>
        /// <param name="contactId">Find all sale results for a given customer</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleResult>> GetSalesAsync(int? page, int? pageSize, System.DateTimeOffset? date, System.DateTimeOffset? dateLe, System.DateTimeOffset? dateLt, System.DateTimeOffset? dateGe, System.DateTimeOffset? dateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, string saleNumber, bool? settled, long? contactId, string companySlug)
        {
            return GetSalesAsync(page, pageSize, date, dateLe, dateLt, dateGe, dateGt, lastModified, lastModifiedLe, lastModifiedLt, lastModifiedGe, lastModifiedGt, saleNumber, settled, contactId, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all sales for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModified">Filter based on date of last modification. Returns results that were last modified on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLe">Returns results that have been last modified before or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedLt">Returns results that have been last modified strictly before the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGe">Returns results that have been last modified after or on the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="lastModifiedGt">Returns results that have been last modified strictly after the date provided as a parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="saleNumber">Find all results with the sale number equal to the specified parameter.</param>
        /// <param name="settled">When set to true, returns only sales that have been settled. Otherwise false returns all sales
        /// <br/>that have not been fully settled.</param>
        /// <param name="contactId">Find all sale results for a given customer</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SaleResult>> GetSalesAsync(int? page, int? pageSize, System.DateTimeOffset? date, System.DateTimeOffset? dateLe, System.DateTimeOffset? dateLt, System.DateTimeOffset? dateGe, System.DateTimeOffset? dateGt, System.DateTimeOffset? lastModified, System.DateTimeOffset? lastModifiedLe, System.DateTimeOffset? lastModifiedLt, System.DateTimeOffset? lastModifiedGe, System.DateTimeOffset? lastModifiedGt, string saleNumber, bool? settled, long? contactId, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateLe")).Append('=').Append(System.Uri.EscapeDataString(dateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateLt")).Append('=').Append(System.Uri.EscapeDataString(dateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateGe")).Append('=').Append(System.Uri.EscapeDataString(dateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateGt")).Append('=').Append(System.Uri.EscapeDataString(dateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModified != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModified")).Append('=').Append(System.Uri.EscapeDataString(lastModified.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedLt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGe")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (lastModifiedGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("lastModifiedGt")).Append('=').Append(System.Uri.EscapeDataString(lastModifiedGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (saleNumber != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("saleNumber")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(saleNumber, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (settled != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("settled")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(settled, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (contactId != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("contactId")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SaleResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new sale. This corresponds to "Annet salg" in Fiken and should be used when the invoice document and invoice number have been created outside Fiken. Otherwise the invoices-endpoints should be used.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateSaleAsync(SaleRequest body, string companySlug)
        {
            return CreateSaleAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new sale. This corresponds to "Annet salg" in Fiken and should be used when the invoice document and invoice number have been created outside Fiken. Otherwise the invoices-endpoints should be used.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateSaleAsync(SaleRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns sale with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SaleResult> GetSaleAsync(string companySlug, long saleId)
        {
            return GetSaleAsync(companySlug, saleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns sale with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleResult> GetSaleAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Marks the sale as settled without payment. This is synonymous with "sett til oppgjort uten betaling" in the GUI. It is possible to change the date of settlement by sending a new settledDate.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="settledDate">Date that the sale is settled</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SaleResult> SettledSaleAsync(string companySlug, long saleId, System.DateTimeOffset settledDate)
        {
            return SettledSaleAsync(companySlug, saleId, settledDate, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Marks the sale as settled without payment. This is synonymous with "sett til oppgjort uten betaling" in the GUI. It is possible to change the date of settlement by sending a new settledDate.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="settledDate">Date that the sale is settled</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleResult> SettledSaleAsync(string companySlug, long saleId, System.DateTimeOffset settledDate, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            if (settledDate == null)
                throw new System.ArgumentNullException("settledDate");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}/settled"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/settled");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("settledDate")).Append('=').Append(System.Uri.EscapeDataString(settledDate.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Sets the deleted flag for a sale. The sale is not deleted, but a reverse transaction is created and the "deleted" property is set to true.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="description">Required description for deleting the sale</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<SaleResult> DeleteSaleAsync(string companySlug, long saleId, string description)
        {
            return DeleteSaleAsync(companySlug, saleId, description, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Sets the deleted flag for a sale. The sale is not deleted, but a reverse transaction is created and the "deleted" property is set to true.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="description">Required description for deleting the sale</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SaleResult> DeleteSaleAsync(string companySlug, long saleId, string description, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            if (description == null)
                throw new System.ArgumentNullException("description");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}/delete"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/delete");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SaleResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified sale.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetSaleAttachmentsAsync(string companySlug, long saleId)
        {
            return GetSaleAttachmentsAsync(companySlug, saleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified sale.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetSaleAttachmentsAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to a Sale
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToSaleAsync(string companySlug, long saleId, string filename, bool? attachToPayment, bool? attachToSale, FileParameter file)
        {
            return AddAttachmentToSaleAsync(companySlug, saleId, filename, attachToPayment, attachToSale, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to a Sale
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToSaleAsync(string companySlug, long saleId, string filename, bool? attachToPayment, bool? attachToSale, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (attachToPayment == null)
                        throw new System.ArgumentNullException("attachToPayment");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attachToPayment, System.Globalization.CultureInfo.InvariantCulture)), "attachToPayment");
                    }

                    if (attachToSale == null)
                        throw new System.ArgumentNullException("attachToSale");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attachToSale, System.Globalization.CultureInfo.InvariantCulture)), "attachToSale");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all payments for given sale
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetSalePaymentsAsync(string companySlug, long saleId)
        {
            return GetSalePaymentsAsync(companySlug, saleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all payments for given sale
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetSalePaymentsAsync(string companySlug, long saleId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}/payments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Payment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new payment for a given sale.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateSalePaymentAsync(Payment body, string companySlug, long saleId)
        {
            return CreateSalePaymentAsync(body, companySlug, saleId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new payment for a given sale.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateSalePaymentAsync(Payment body, string companySlug, long saleId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}/payments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns payment with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Payment> GetSalePaymentAsync(string companySlug, long saleId, long paymentId)
        {
            return GetSalePaymentAsync(companySlug, saleId, paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns payment with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Payment> GetSalePaymentAsync(string companySlug, long saleId, long paymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (saleId == null)
                throw new System.ArgumentNullException("saleId");

            if (paymentId == null)
                throw new System.ArgumentNullException("paymentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/{saleId}/payments/{paymentId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(saleId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Payment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all sale drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DraftResult>> GetSaleDraftsAsync(int? page, int? pageSize, string companySlug)
        {
            return GetSaleDraftsAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all sale drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DraftResult>> GetSaleDraftsAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DraftResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a sale draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateSaleDraftAsync(DraftRequest body, string companySlug)
        {
            return CreateSaleDraftAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a sale draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateSaleDraftAsync(DraftRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DraftResult> GetSaleDraftAsync(string companySlug, long draftId)
        {
            return GetSaleDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DraftResult> GetSaleDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DraftResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateSaleDraftAsync(DraftRequest body, string companySlug, long draftId)
        {
            return UpdateSaleDraftAsync(body, companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateSaleDraftAsync(DraftRequest body, string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteSaleDraftAsync(string companySlug, long draftId)
        {
            return DeleteSaleDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteSaleDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetSaleDraftAttachmentsAsync(string companySlug, long draftId)
        {
            return GetSaleDraftAttachmentsAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetSaleDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to a draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToSaleDraftAsync(string companySlug, long draftId, string filename, FileParameter file)
        {
            return AddAttachmentToSaleDraftAsync(companySlug, draftId, filename, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to a draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToSaleDraftAsync(string companySlug, long draftId, string filename, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a sale from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateSaleFromDraftAsync(string companySlug, long draftId)
        {
            return CreateSaleFromDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a sale from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateSaleFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/sales/drafts/{draftId}/createSale"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/sales/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createSale");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all purchases for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="sortBy">Sorts results in either ascending (asc) or descending (desc) order based on the parameter value.</param>
        /// <param name="paid">When set to true, returns only purchases that have been paid. Otherwise false returns all purchases
        /// <br/>that have not been fully settled.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PurchaseResult>> GetPurchasesAsync(int? page, int? pageSize, System.DateTimeOffset? date, System.DateTimeOffset? dateLe, System.DateTimeOffset? dateLt, System.DateTimeOffset? dateGe, System.DateTimeOffset? dateGt, SortBy3? sortBy, bool? paid, string companySlug)
        {
            return GetPurchasesAsync(page, pageSize, date, dateLe, dateLt, dateGe, dateGt, sortBy, paid, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all purchases for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="date">Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLe">Filter based on date less than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateLt">Filter based on date strictly less than parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGe">Filter based on date greater than or equal to parameter value.
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="dateGt">Filter based on date strictly greater than parameter value
        /// <br/>Dates are represented as strings formatted as YYYY-MM-DD.
        /// <br/>Example: January 1st, 1970: "1970-01-01"</param>
        /// <param name="sortBy">Sorts results in either ascending (asc) or descending (desc) order based on the parameter value.</param>
        /// <param name="paid">When set to true, returns only purchases that have been paid. Otherwise false returns all purchases
        /// <br/>that have not been fully settled.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PurchaseResult>> GetPurchasesAsync(int? page, int? pageSize, System.DateTimeOffset? date, System.DateTimeOffset? dateLe, System.DateTimeOffset? dateLt, System.DateTimeOffset? dateGe, System.DateTimeOffset? dateGt, SortBy3? sortBy, bool? paid, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (date != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("date")).Append('=').Append(System.Uri.EscapeDataString(date.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateLe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateLe")).Append('=').Append(System.Uri.EscapeDataString(dateLe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateLt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateLt")).Append('=').Append(System.Uri.EscapeDataString(dateLt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateGe != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateGe")).Append('=').Append(System.Uri.EscapeDataString(dateGe.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (dateGt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("dateGt")).Append('=').Append(System.Uri.EscapeDataString(dateGt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (paid != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("paid")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(paid, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<PurchaseResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new purchase.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreatePurchaseAsync(PurchaseRequest body, string companySlug)
        {
            return CreatePurchaseAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new purchase.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreatePurchaseAsync(PurchaseRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns purchase with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PurchaseResult> GetPurchaseAsync(string companySlug, long purchaseId)
        {
            return GetPurchaseAsync(companySlug, purchaseId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns purchase with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseResult> GetPurchaseAsync(string companySlug, long purchaseId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (purchaseId == null)
                throw new System.ArgumentNullException("purchaseId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/{purchaseId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Sets the deleted flag for a purchase. The purchase is not deleted, but a reverse transaction is created and the "deleted" property is set to true.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="description">Required description for deleting the purchase</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PurchaseResult> DeletePurchaseAsync(string companySlug, long purchaseId, string description)
        {
            return DeletePurchaseAsync(companySlug, purchaseId, description, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Sets the deleted flag for a purchase. The purchase is not deleted, but a reverse transaction is created and the "deleted" property is set to true.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="description">Required description for deleting the purchase</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PurchaseResult> DeletePurchaseAsync(string companySlug, long purchaseId, string description, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (purchaseId == null)
                throw new System.ArgumentNullException("purchaseId");

            if (description == null)
                throw new System.ArgumentNullException("description");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/{purchaseId}/delete"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/delete");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("description")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PurchaseResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified purchase.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetPurchaseAttachmentsAsync(string companySlug, long purchaseId)
        {
            return GetPurchaseAttachmentsAsync(companySlug, purchaseId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified purchase.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetPurchaseAttachmentsAsync(string companySlug, long purchaseId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (purchaseId == null)
                throw new System.ArgumentNullException("purchaseId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/{purchaseId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to a Purchase
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToPurchaseAsync(string companySlug, long purchaseId, string filename, bool? attachToPayment, bool? attachToSale, FileParameter file)
        {
            return AddAttachmentToPurchaseAsync(companySlug, purchaseId, filename, attachToPayment, attachToSale, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to a Purchase
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="filename">The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <param name="attachToPayment">True if this attachment may document the payment (i.e. transaction receipt from credit card/payment company, export from bank, etc.). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <param name="attachToSale">True if this attachment may document the sale (i.e. invoice, etc). Default value is false if not specified. At least one of attachToPayment and attachToSale must be true.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToPurchaseAsync(string companySlug, long purchaseId, string filename, bool? attachToPayment, bool? attachToSale, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (purchaseId == null)
                throw new System.ArgumentNullException("purchaseId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (attachToPayment == null)
                        throw new System.ArgumentNullException("attachToPayment");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attachToPayment, System.Globalization.CultureInfo.InvariantCulture)), "attachToPayment");
                    }

                    if (attachToSale == null)
                        throw new System.ArgumentNullException("attachToSale");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(attachToSale, System.Globalization.CultureInfo.InvariantCulture)), "attachToSale");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/{purchaseId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all purchases for given company
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPurchasePaymentsAsync(string companySlug, long purchaseId)
        {
            return GetPurchasePaymentsAsync(companySlug, purchaseId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all purchases for given company
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Payment>> GetPurchasePaymentsAsync(string companySlug, long purchaseId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (purchaseId == null)
                throw new System.ArgumentNullException("purchaseId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/{purchaseId}/payments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Payment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new payment for a purchase
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreatePurchasePaymentAsync(Payment body, string companySlug, long purchaseId)
        {
            return CreatePurchasePaymentAsync(body, companySlug, purchaseId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new payment for a purchase
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreatePurchasePaymentAsync(Payment body, string companySlug, long purchaseId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (purchaseId == null)
                throw new System.ArgumentNullException("purchaseId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/{purchaseId}/payments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns given payment for specified purchase
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<Payment> GetPurchasePaymentAsync(string companySlug, long purchaseId, long paymentId)
        {
            return GetPurchasePaymentAsync(companySlug, purchaseId, paymentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns given payment for specified purchase
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Payment> GetPurchasePaymentAsync(string companySlug, long purchaseId, long paymentId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (purchaseId == null)
                throw new System.ArgumentNullException("purchaseId");

            if (paymentId == null)
                throw new System.ArgumentNullException("paymentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/{purchaseId}/payments/{paymentId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(purchaseId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/payments/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(paymentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Payment>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all purchase drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DraftResult>> GetPurchaseDraftsAsync(int? page, int? pageSize, string companySlug)
        {
            return GetPurchaseDraftsAsync(page, pageSize, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all purchase drafts for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DraftResult>> GetPurchaseDraftsAsync(int? page, int? pageSize, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<DraftResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a purchase draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreatePurchaseDraftAsync(DraftRequest body, string companySlug)
        {
            return CreatePurchaseDraftAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a purchase draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreatePurchaseDraftAsync(DraftRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<DraftResult> GetPurchaseDraftAsync(string companySlug, long draftId)
        {
            return GetPurchaseDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DraftResult> GetPurchaseDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DraftResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdatePurchaseDraftAsync(DraftRequest body, string companySlug, long draftId)
        {
            return UpdatePurchaseDraftAsync(body, companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates draft with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdatePurchaseDraftAsync(DraftRequest body, string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeletePurchaseDraftAsync(string companySlug, long draftId)
        {
            return DeletePurchaseDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete draft with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeletePurchaseDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts/{draftId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetPurchaseDraftAttachmentsAsync(string companySlug, long draftId)
        {
            return GetPurchaseDraftAttachmentsAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all attachments for specified draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> GetPurchaseDraftAttachmentsAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Attachment>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates and adds a new attachment to a draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task AddAttachmentToPurchaseDraftAsync(string companySlug, long draftId, string filename, FileParameter file)
        {
            return AddAttachmentToPurchaseDraftAsync(companySlug, draftId, filename, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates and adds a new attachment to a draft
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <param name="filename">Required. The filename. Must end with either .png, .jpeg, .jpg, .gif or .pdf</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task AddAttachmentToPurchaseDraftAsync(string companySlug, long draftId, string filename, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts/{draftId}/attachments"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/attachments");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a purchase from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreatePurchaseFromDraftAsync(string companySlug, long draftId)
        {
            return CreatePurchaseFromDraftAsync(companySlug, draftId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a purchase from an already created draft.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="draftId">The draftId (primary key of the returned object) is returned in the GET all drafts call.</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreatePurchaseFromDraftAsync(string companySlug, long draftId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (draftId == null)
                throw new System.ArgumentNullException("draftId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/purchases/drafts/{draftId}/createPurchase"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/purchases/drafts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(draftId, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/createPurchase");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns the contents of the inbox for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="sortBy">Sorts results in either ascending (asc) or descending (desc) order based on the parameter value.</param>
        /// <param name="name">Filter documents based on their name, case-insensitive substring match.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InboxResult>> GetInboxAsync(int? page, int? pageSize, SortBy4? sortBy, Status? status, string name, string companySlug)
        {
            return GetInboxAsync(page, pageSize, sortBy, status, name, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the contents of the inbox for given company.
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="sortBy">Sorts results in either ascending (asc) or descending (desc) order based on the parameter value.</param>
        /// <param name="name">Filter documents based on their name, case-insensitive substring match.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<InboxResult>> GetInboxAsync(int? page, int? pageSize, SortBy4? sortBy, Status? status, string name, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/inbox"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inbox");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (sortBy != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("sortBy")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(sortBy, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<InboxResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Upload a document to the inbox
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="name">The name of the inbox document, usually the same as the filename</param>
        /// <param name="filename">The filename of the file uploaded</param>
        /// <param name="description">Additional description of the inbox document</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateInboxDocumentAsync(string companySlug, string name, string filename, string description, FileParameter file)
        {
            return CreateInboxDocumentAsync(companySlug, name, filename, description, file, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Upload a document to the inbox
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <param name="name">The name of the inbox document, usually the same as the filename</param>
        /// <param name="filename">The filename of the file uploaded</param>
        /// <param name="description">Additional description of the inbox document</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateInboxDocumentAsync(string companySlug, string name, string filename, string description, FileParameter file, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (name == null)
                        throw new System.ArgumentNullException("name");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture)), "name");
                    }

                    if (filename == null)
                        throw new System.ArgumentNullException("filename");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(filename, System.Globalization.CultureInfo.InvariantCulture)), "filename");
                    }

                    if (description == null)
                        throw new System.ArgumentNullException("description");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(description, System.Globalization.CultureInfo.InvariantCulture)), "description");
                    }

                    if (file == null)
                        throw new System.ArgumentNullException("file");
                    else
                    {
                        var content_file_ = new System.Net.Http.StreamContent(file.Data);
                        if (!string.IsNullOrEmpty(file.ContentType))
                            content_file_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(file.ContentType);
                        content_.Add(content_file_, "file", file.FileName ?? "file");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/inbox"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inbox");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns the inbox document with specified id
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<InboxResult> GetInboxDocumentAsync(string companySlug, long inboxDocumentId)
        {
            return GetInboxDocumentAsync(companySlug, inboxDocumentId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns the inbox document with specified id
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<InboxResult> GetInboxDocumentAsync(string companySlug, long inboxDocumentId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (inboxDocumentId == null)
                throw new System.ArgumentNullException("inboxDocumentId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/inbox/{inboxDocumentId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/inbox/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(inboxDocumentId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<InboxResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns all projects for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="completed">Filter results based on completed / not completed.</param>
        /// <param name="name">Filter results based on name of the project.</param>
        /// <param name="number">Filter results based on number of the project.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectResult>> GetProjectsAsync(int? page, int? pageSize, bool? completed, string name, string number, string companySlug)
        {
            return GetProjectsAsync(page, pageSize, completed, name, number, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns all projects for given company
        /// </remarks>
        /// <param name="page">Returns the number of the page to return. Valid page values are integers from 0 to the total number of pages.
        /// <br/>Default value is 0.</param>
        /// <param name="pageSize">Defines the number of entries to return on each page. Maximum number of results that can be returned at one time are 100.
        /// <br/>Default value is 25.</param>
        /// <param name="completed">Filter results based on completed / not completed.</param>
        /// <param name="name">Filter results based on name of the project.</param>
        /// <param name="number">Filter results based on number of the project.</param>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectResult>> GetProjectsAsync(int? page, int? pageSize, bool? completed, string name, string number, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/projects"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/projects");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (pageSize != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("pageSize")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (completed != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("completed")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(completed, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ProjectResult>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Creates a new project
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task CreateProjectAsync(ProjectRequest body, string companySlug)
        {
            return CreateProjectAsync(body, companySlug, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Creates a new project
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task CreateProjectAsync(ProjectRequest body, string companySlug, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/projects"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/projects");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Returns project with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ProjectResult> GetProjectAsync(string companySlug, long projectId)
        {
            return GetProjectAsync(companySlug, projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Returns project with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>OK</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ProjectResult> GetProjectAsync(string companySlug, long projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/projects/{projectId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProjectResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Updates project with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task UpdateProjectAsync(UpdateProjectRequest body, string companySlug, long projectId)
        {
            return UpdateProjectAsync(body, companySlug, projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Updates project with provided id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task UpdateProjectAsync(UpdateProjectRequest body, string companySlug, long projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, _settings.Value);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/projects/{projectId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <remarks>
        /// Delete project with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task DeleteProjectAsync(string companySlug, long projectId)
        {
            return DeleteProjectAsync(companySlug, projectId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Delete project with specified id.
        /// </remarks>
        /// <param name="companySlug">Slug of company to retrieve</param>
        /// <returns>Deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task DeleteProjectAsync(string companySlug, long projectId, System.Threading.CancellationToken cancellationToken)
        {
            if (companySlug == null)
                throw new System.ArgumentNullException("companySlug");

            if (projectId == null)
                throw new System.ArgumentNullException("projectId");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "companies/{companySlug}/projects/{projectId}"
                    urlBuilder_.Append("companies/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(companySlug, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/projects/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(projectId, System.Globalization.CultureInfo.InvariantCulture)));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccountBalance : Account
    {
        /// <summary>
        /// Balance of account for a given date given in cents (5050 = 50.50)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("balance")]
        public long Balance { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Account
    {

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {

        [System.Text.Json.Serialization.JsonPropertyName("streetAddress")]
        public string StreetAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("streetAddressLine2")]
        public string StreetAddressLine2 { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string City { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        public string PostCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Country { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Attachment
    {
        /// <summary>
        /// User-defined identifier for attachment. Could be the Invoice Id or receipt number for example.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// For use with API credentials (bearer token or oauth 2)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("downloadUrl")]
        public string DownloadUrl { get; set; }

        /// <summary>
        /// Requires the user to login with username and password in Fiken.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("downloadUrlWithFikenNormalUserCredentials")]
        public string DownloadUrlWithFikenNormalUserCredentials { get; set; }

        /// <summary>
        /// Field for additional information for this attachment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AttachmentType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BankAccountNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        public string Bic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        public string Iban { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("foreignService")]
        public string ForeignService { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BankAccountRequestType Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inactive")]
        public bool Inactive { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BankAccountResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountId")]
        public long BankAccountId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountCode")]
        public string AccountCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        public string Iban { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        public string Bic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("foreignService")]
        public string ForeignService { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BankAccountResultType Type { get; set; }

        /// <summary>
        /// Amounts are always represented as a number, and specifies the number of cents in the amount. Fractions will be ignored. ie. 10050 = 100.50
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("reconciledBalance")]
        public long ReconciledBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("reconciledDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ReconciledDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("inactive")]
        public bool Inactive { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Company
    {
        /// <summary>
        /// Name of company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Formatted name of company. This is the companySlug that should be used in all URLs related to this company.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("slug")]
        public string Slug { get; set; }

        /// <summary>
        /// Brreg organization number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationNumber")]
        public string OrganizationNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CompanyVatType VatType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creationDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset CreationDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("hasApiAccess")]
        public bool HasApiAccess { get; set; }

        /// <summary>
        /// Whether the company is a demo (true) or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("testCompany")]
        public bool TestCompany { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("accountingStartDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset AccountingStartDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public long? ContactId { get; set; }

        /// <summary>
        /// Date that contact was created in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// Date that contact was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Email { get; set; }

        /// <summary>
        /// Brreg organization number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string OrganizationNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerNumber")]
        public long? CustomerNumber { get; set; }

        /// <summary>
        /// Format 1500:XXXXX
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerAccountCode")]
        public string CustomerAccountCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(20)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// A number that can be used to connect a contact to your own data.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("memberNumber")]
        public double? MemberNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("supplierNumber")]
        public long? SupplierNumber { get; set; }

        /// <summary>
        /// Format 2400:XXXXX
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("supplierAccountCode")]
        public string SupplierAccountCode { get; set; }

        /// <summary>
        /// True if the contact is a customer. It is possible for a contact to be both customer and supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public bool Customer { get; set; } = false;

        /// <summary>
        /// True if the contact is a supplier. It is possible for a contact to be both supplier and customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("supplier")]
        public bool Supplier { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(11)]
        public string BankAccountNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactPerson")]
        public System.Collections.Generic.ICollection<ContactPerson> ContactPerson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public System.Collections.Generic.ICollection<ContactNote> Notes { get; set; }

        /// <summary>
        /// ISO 4217 currency code. Default foreign currency to use when creating invoice to this contact (USD, EUR, SEK etc)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// The language to use when sending documents to this contact. NORWEGIAN or ENGLISH. Defaults to NORWEGIAN.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public string Language { get; set; }

        /// <summary>
        /// Whether the contact has been deactivated (true) or is active (false)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("inactive")]
        public bool Inactive { get; set; }

        /// <summary>
        /// Default number of days until due date for invoices.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("daysUntilInvoicingDueDate")]
        public int DaysUntilInvoicingDueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<string> Groups { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<Attachment> Documents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactNote
    {

        [System.Text.Json.Serialization.JsonPropertyName("author")]
        public string Author { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Used for invoices and sales
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Note
    {

        [System.Text.Json.Serialization.JsonPropertyName("author")]
        public string Author { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string Note1 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactPerson
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonId")]
        public long ContactPersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Email { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        public string PhoneNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Counter
    {
        /// <summary>
        /// Current value of the counter
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public int Value { get; set; } = 10000;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditNoteLineResult
    {
        /// <summary>
        /// Field is similar to vatType, it defaults to the product's income account. Either the line or the product needs to have an income account set.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        public string IncomeAccount { get; set; }

        /// <summary>
        /// One of: {"HIGH", "MEDIUM", "LOW", "EXEMPT", "EXEMPT_IMPORT_EXPORT", "EXEMPT_REVERSE", "OUTSIDE", "NONE"}. "HIGH" is the most common.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        public string VatType { get; set; }

        /// <summary>
        /// Net price per unit in invoice currency (in cents).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public long UnitPrice { get; set; }

        /// <summary>
        /// Number of units to be invoiced.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; }

        /// <summary>
        /// If field is set, all amounts must be given before the discount is applied. The API will calculate the new totals. Discount value should be a percent with a value between 0 and 100. Decimal values such as 25.5 are also allowed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public double Discount { get; set; }

        /// <summary>
        /// Product Id of product associated with invoice line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public long ProductId { get; set; }

        /// <summary>
        /// Description of the invoiced product or service.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Additional information to be printed on invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Comment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditNoteResult
    {
        /// <summary>
        /// Id of credit note
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditNoteId")]
        public long CreditNoteId { get; set; }

        /// <summary>
        /// Unique credit note number generated by us.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditNoteNumber")]
        public long CreditNoteNumber { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        [System.ComponentModel.DataAnnotations.Required]
        public Contact Customer { get; set; } = new Contact();

        /// <summary>
        /// Net amount (in creditNote currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// VAT amount (in creditNote currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vat")]
        public long Vat { get; set; }

        /// <summary>
        /// Gross amount (= net+VAT) (in creditNote currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        /// <summary>
        /// Net amount in NOK (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netInNok")]
        public long NetInNok { get; set; }

        /// <summary>
        /// VAT amount in NOK (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatInNok")]
        public long VatInNok { get; set; }

        /// <summary>
        /// Gross amount in NOK (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grossInNok")]
        public long GrossInNok { get; set; }

        /// <summary>
        /// Comment/description printed above the credit note lines.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditNoteText")]
        public string CreditNoteText { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Reference if sending via EHF.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<InvoiceLineResult> Lines { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// Issue date of the credit note, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }

        /// <summary>
        /// If the credit note as been marked as settled (True) or not (False).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("settled")]
        public bool Settled { get; set; }

        /// <summary>
        /// Id of associated invoice
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("associatedInvoiceId")]
        public long AssociatedInvoiceId { get; set; }

        /// <summary>
        /// The UUID of the credit note draft used to create the credit note. 
        /// <br/>Credit notes created directly from invoices (POST / creditNotes/full and POST /creditNotes/partial) 
        /// <br/>will not have a draft uuid as no draft is created in this case.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditNoteDraftUuid")]
        public string CreditNoteDraftUuid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditNotePdf")]
        public Attachment CreditNotePdf { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("project")]
        public ProjectResult Project { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sale")]
        public SaleResult Sale { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftLineRequest
    {
        /// <summary>
        /// Description of the sale/purchase line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Text { get; set; }

        /// <summary>
        /// Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
        /// <br/>Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
        /// <br/>HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
        /// <br/>LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VatType { get; set; }

        /// <summary>
        /// Field is similar to vatType, it defaults to the product's income account. Either the line or the product needs to have an income account set.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IncomeAccount { get; set; }

        /// <summary>
        /// Net amount (in creditNote currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// Gross amount (= net+VAT) (in creditNote currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftLineResult
    {
        /// <summary>
        /// Description of the sale/purchase line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("text")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Text { get; set; }

        /// <summary>
        /// Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
        /// <br/>Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
        /// <br/>HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
        /// <br/>LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        public string VatType { get; set; }

        /// <summary>
        /// Field is similar to vatType, it defaults to the product's income account. Either the line or the product needs to have an income account set.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        public string IncomeAccount { get; set; }

        /// <summary>
        /// Net amount (in creditNote currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// Gross amount (= net+VAT) (in creditNote currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("project")]
        public ProjectResult Project { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftRequest
    {
        /// <summary>
        /// Issue date of the draft, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceIssueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset InvoiceIssueDate { get; set; }

        /// <summary>
        /// Due date of draft, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// If invoice associated with draft, this is the invoice number (not to be confused with the invoiceId of an invoice issued from Fiken)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string InvoiceNumber { get; set; }

        /// <summary>
        /// Contact Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public long ContactId { get; set; }

        /// <summary>
        /// Project ID if only 1 project associated with entire draft. It is also possible to specify the project on individual draft lines
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        /// <summary>
        /// If a cash sale/purchase (true) or otherwise (false)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cash")]
        public bool Cash { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        /// <summary>
        /// Whether the sale/purchase has been paid (true) or not (false)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DraftLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<DraftLineRequest>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DraftResult
    {
        /// <summary>
        /// Draft ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("draftId")]
        public long DraftId { get; set; }

        /// <summary>
        /// UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Issue date of the draft, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceIssueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset InvoiceIssueDate { get; set; }

        /// <summary>
        /// Due date of draft, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// If invoice associated with draft, this is the invoice number (not to be confused with the invoiceId of an invoice issued from Fiken)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public string InvoiceNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contact")]
        public Contact Contact { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("project")]
        public ProjectResult Project { get; set; }

        /// <summary>
        /// If a cash sale/purchase (true) or otherwise (false)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cash")]
        public bool Cash { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        /// <summary>
        /// Whether the sale/purchase has been paid (true) or not (false)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attachments")]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<DraftLineResult> Lines { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FullCreditNoteRequest
    {
        /// <summary>
        /// Date that the credit note is issued, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }

        /// <summary>
        /// Id of invoice that the credit note is associated with.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]
        public long InvoiceId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditNoteText")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string CreditNoteText { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GeneralJournalEntryRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// The journal entry can be set to either open or closed (closed is the default). In the case of an open journal entry these can be deleted without creating a counter transaction.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("open")]
        public bool Open { get; set; } = false;

        [System.Text.Json.Serialization.JsonPropertyName("journalEntries")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JournalEntry> JournalEntries { get; set; } = new System.Collections.ObjectModel.Collection<JournalEntry>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InboxResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]
        public long DocumentId { get; set; }

        /// <summary>
        /// Name of the document as it appears in the inbox
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Additional description of document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Name of the underlying file for the inbox document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("filename")]
        public string Filename { get; set; }

        /// <summary>
        /// Whether the document has been used as documentation or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public bool Status { get; set; }

        /// <summary>
        /// When the document was created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdAt")]
        public System.DateTimeOffset CreatedAt { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceishDraftLine
    {
        /// <summary>
        /// Unique draft line ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceishDraftLineId")]
        public long InvoiceishDraftLineId { get; set; }

        /// <summary>
        /// Date that the draft line was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Product to be credited/debited on invoice draft line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public long ProductId { get; set; }

        /// <summary>
        /// Description of the invoiced product or service.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Net price per unit in invoice currency (in cents).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public long UnitPrice { get; set; }

        /// <summary>
        /// Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
        /// <br/>Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
        /// <br/>HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
        /// <br/>LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        public string VatType { get; set; }

        /// <summary>
        /// Number of units to be invoiced.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; }

        /// <summary>
        /// Percentage discount charged on invoice draft line. Should be a value between 0 and 100. Can be decimal values such as 25.5
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public double Discount { get; set; }

        /// <summary>
        /// Additional information to be printed on invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Comment { get; set; }

        /// <summary>
        /// Field is similar to vatType, it defaults to the product's income account. Either the line or the product needs to have an income account set.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        public string IncomeAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceishDraftRequest
    {
        /// <summary>
        /// Type of draft.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InvoiceishDraftRequestType Type { get; set; }

        /// <summary>
        /// UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Issue date of the invoice draft, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }

        /// <summary>
        /// Days until due date of the invoice draft.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("daysUntilDueDate")]
        public int DaysUntilDueDate { get; set; }

        /// <summary>
        /// Comment/description printed above the invoice lines. If not present, and standard text is registered, standard text is printed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceText")]
        public string InvoiceText { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Reference if sending invoice via EHF.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<InvoiceishDraftLine> Lines { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        public string Iban { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        public string Bic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAccount")]
        public string PaymentAccount { get; set; }

        /// <summary>
        /// customerId = contactId where customer = true
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public long CustomerId { get; set; }

        /// <summary>
        /// Id of the contact person. Must be associated with the provided customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonId")]
        public long ContactPersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceishDraftResult
    {
        /// <summary>
        /// Invoice draft ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("draftId")]
        public long DraftId { get; set; }

        /// <summary>
        /// UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Type of invoice draft.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public InvoiceishDraftResultType Type { get; set; } = Fiken.Sdk.InvoiceishDraftResultType.Invoice;

        /// <summary>
        /// Date that the draft was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Issue date of the invoice draft, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }

        /// <summary>
        /// Days until due date of the invoice draft.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("daysUntilDueDate")]
        public int DaysUntilDueDate { get; set; }

        /// <summary>
        /// Comment/description printed above the invoice lines
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceText")]
        public string InvoiceText { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Reference if sending invoice via EHF.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<InvoiceishDraftLine> Lines { get; set; }

        /// <summary>
        /// The net amount to be invoiced in the specified currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// The gross amount to be invoiced in the specified currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("iban")]
        public string Iban { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("bic")]
        public string Bic { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAccount")]
        public string PaymentAccount { get; set; }

        /// <summary>
        /// Customer(s) to be invoiced.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customers")]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<Contact> Customers { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attachments")]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("createdFromInvoiceId")]
        public long CreatedFromInvoiceId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceLineRequest
    {
        /// <summary>
        /// Net amount of invoice line in cents in original currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long? Net { get; set; }

        /// <summary>
        /// VAT amount of invoice line in cents in original currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vat")]
        public long? Vat { get; set; }

        /// <summary>
        /// Taken from either 1) the line or 2) the product. At least vatType or vatPercent has to be specified. If both are specified, Fiken will assert that the given vat type matches the given vat percent for the issue date.
        /// <br/>One of: {"HIGH", "MEDIUM", "LOW", "EXEMPT", "EXEMPT_IMPORT_EXPORT", "EXEMPT_REVERSE", "OUTSIDE", "NONE"}. "HIGH" is the most common.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        public string VatType { get; set; }

        /// <summary>
        /// Gross amount of invoice line in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long? Gross { get; set; }

        /// <summary>
        /// Percentage value of VAT charged on invoice line. Should be a value between 0 and 100. Can be decimal values such as 25.5
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatInPercent")]
        public double? VatInPercent { get; set; }

        /// <summary>
        /// Net price per unit in invoice currency (in cents). WARNING - if specified here and different from unitPrice of the product, then this amount overwrites the product price on the invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public long? UnitPrice { get; set; }

        /// <summary>
        /// Number of units to be invoiced.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; }

        /// <summary>
        /// If field is set, all amounts must be given before the discount is applied. The API will calculate the new totals. Discount value should be a value between 0 and 100.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public double? Discount { get; set; }

        /// <summary>
        /// Name of product to be printed on invoice line. Should only be specified when productId is not provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Product Id of product associated with invoice line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public long ProductId { get; set; }

        /// <summary>
        /// Description of the invoiced product or service. WARNING - if specified here and different from description of the product, then thisoverwrites the product description on the invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Additional information to be printed on invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Comment { get; set; }

        /// <summary>
        /// Field is similar to vatType, it defaults to the product's income account. Either the line or the product needs to have an income account set.
        /// <br/>WARNING - if specified here and different from income account of the product, then this account overwrites the product account on the invoice.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        public string IncomeAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceLineResult
    {
        /// <summary>
        /// Net amount of invoice line in cents in original currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// VAT amount of invoice line in cents in original currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vat")]
        public long Vat { get; set; }

        /// <summary>
        /// Taken from either 1) the line or 2) the product. At least vatType or vatPercent has to be specified. If both are specified, Fiken will assert that the given vat type matches the given vat percent for the issue date.
        /// <br/>One of: {"HIGH", "MEDIUM", "LOW", "EXEMPT", "EXEMPT_IMPORT_EXPORT", "EXEMPT_REVERSE", "OUTSIDE", "NONE"}. "HIGH" is the most common.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        public string VatType { get; set; }

        /// <summary>
        /// Gross amount of invoice line in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        /// <summary>
        /// Net amount of invoice line in cents in NOK if currency and amounts provided are in foreign currency. This is calculated by Fiken.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netInNok")]
        public long NetInNok { get; set; }

        /// <summary>
        /// VAT amount of invoice line in cents in NOK if currency and amounts provided are in foreign currency. This is calculated by Fiken.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatInNok")]
        public long VatInNok { get; set; }

        /// <summary>
        /// Gross amount of invoice line in cents in NOK if currency and amounts provided are in foreign currency. This is calculated by Fiken.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grossInNok")]
        public long GrossInNok { get; set; }

        /// <summary>
        /// Percentage value of VAT charged on invoice line. Should be a value between 0 and 100. Can be decimal values such as 25.5
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatInPercent")]
        public double VatInPercent { get; set; }

        /// <summary>
        /// Net price per unit in invoice currency (in cents).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public long UnitPrice { get; set; }

        /// <summary>
        /// Number of units to be invoiced.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("quantity")]
        public double Quantity { get; set; }

        /// <summary>
        /// If field is set, all amounts must be given before the discount is applied. The API will calculate the new totals. Discount value should be a value between 0 and 100.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public double Discount { get; set; }

        /// <summary>
        /// Product Id of product associated with invoice line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public long ProductId { get; set; }

        /// <summary>
        /// Name of product to be printed on invoice line.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("productName")]
        public string ProductName { get; set; }

        /// <summary>
        /// Description of the invoiced product or service.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Additional information to be printed on invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Comment { get; set; }

        /// <summary>
        /// Field is similar to vatType, it defaults to the product's income account. Either the line or the product needs to have an income account set.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        public string IncomeAccount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceRequest
    {
        /// <summary>
        /// UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters. If not provided, API will generate a UUID.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        public string Uuid { get; set; }

        /// <summary>
        /// Date that the invoice was issued, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }

        /// <summary>
        /// Due date of invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<InvoiceLineRequest> Lines { get; set; } = new System.Collections.ObjectModel.Collection<InvoiceLineRequest>();

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Your reference for invoice, free string format
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        /// <summary>
        /// Reference if sending via EHF.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        /// <summary>
        /// customerId = contactId where customer = true
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public long CustomerId { get; set; }

        /// <summary>
        /// Id of the contact person. Must be associated with the provided customer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonId")]
        public long? ContactPersonId { get; set; }

        /// <summary>
        /// Bank account code associated with invoice, format 1920:XXXXX
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BankAccountCode { get; set; }

        /// <summary>
        /// ISO 4217 currency code. Defaults to "NOK" if unspecified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// If not present, and standard text is registered, standard text is printed.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceText")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string InvoiceText { get; set; }

        /// <summary>
        /// Payment taken in cash (True) or not (False).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cash")]
        public bool Cash { get; set; }

        /// <summary>
        /// For Cash Invoices only. For instance "1920:10001".
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentAccount")]
        public string PaymentAccount { get; set; }

        /// <summary>
        /// Optional - Associated project for the invoice to be created.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long? ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InvoiceResult
    {
        /// <summary>
        /// Invoice Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]
        public long InvoiceId { get; set; }

        /// <summary>
        /// Date that the invoice was created in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// Date that invoices was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Unique invoice number generated by us.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceNumber")]
        public long InvoiceNumber { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        /// <summary>
        /// Issue date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }

        /// <summary>
        /// Due date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// Original due date of the invoice if the due date has been changed, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originalDueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset OriginalDueDate { get; set; }

        /// <summary>
        /// Net amount (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// VAT amount (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vat")]
        public long Vat { get; set; }

        /// <summary>
        /// Gross amount (= net+VAT) (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        /// <summary>
        /// Net amount in NOK (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netInNok")]
        public long NetInNok { get; set; }

        /// <summary>
        /// VAT amount in NOK (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatInNok")]
        public long VatInNok { get; set; }

        /// <summary>
        /// Gross amount in NOK (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grossInNok")]
        public long GrossInNok { get; set; }

        /// <summary>
        /// Purchase associated with Invoice is a cash purchase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cash")]
        public bool Cash { get; set; }

        /// <summary>
        /// Comment/description printed above the invoice lines
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceText")]
        public string InvoiceText { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        /// <summary>
        /// The UUID of invoice draft used to create the invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceDraftUuid")]
        public string InvoiceDraftUuid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<InvoiceLineResult> Lines { get; set; }

        /// <summary>
        /// ISO 4217 currency code, default value is NOK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; } = "NOK";

        [System.Text.Json.Serialization.JsonPropertyName("bankAccountNumber")]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// If the invoice was not sent using Fiken this can be set to "true"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sentManually")]
        public bool SentManually { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("invoicePdf")]
        public Attachment InvoicePdf { get; set; }

        /// <summary>
        /// Associated credit note Id(s)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("associatedCreditNotes")]
        public System.Collections.Generic.ICollection<long> AssociatedCreditNotes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("attachments")]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Contact Customer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sale")]
        public SaleResult Sale { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("project")]
        public ProjectResult Project { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dispatches")]
        public System.Collections.Generic.ICollection<DispatchResult> Dispatches { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DispatchResult
    {
        /// <summary>
        /// Date that invoice was sent from Fiken, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// The type of disptach. Unknown is returned when an invoice was manually sent and Fiken doesn't know the dispatch method.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dispatchType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DispatchResultDispatchType DispatchType { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JournalEntryLine
    {
        /// <summary>
        /// This will be the net amount (excluding VAT) for debitAccount lines and gross amount 
        /// <br/>(including VAT) for creditAccount lines. The reason for this difference is due to the 
        /// <br/>way Fiken calculates VAT based on the debitVatCode and creditVatCode.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        public string Account { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("vatCode")]
        public string VatCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("debitAccount")]
        public string DebitAccount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("debitVatCode")]
        public long DebitVatCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditAccount")]
        public string CreditAccount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditVatCode")]
        public long CreditVatCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public System.Collections.Generic.ICollection<long> ProjectId { get; set; }

        /// <summary>
        /// Date that journal entry line was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JournalEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("journalEntryId")]
        public long JournalEntryId { get; set; }

        /// <summary>
        /// Date that journal entry was created in Fiken, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// Date that journal entry was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public long TransactionId { get; set; }

        /// <summary>
        /// If a journal entry has been cancelled this provides the id of the balancing transaction
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("offsetTransactionId")]
        public long OffsetTransactionId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("journalEntryNumber")]
        public int JournalEntryNumber { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JournalEntryLine> Lines { get; set; } = new System.Collections.ObjectModel.Collection<JournalEntryLine>();

        [System.Text.Json.Serialization.JsonPropertyName("attachments")]
        public System.Collections.Generic.ICollection<Attachment> Attachments { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Offer
    {
        /// <summary>
        /// offer ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("offerId")]
        public long OfferId { get; set; }

        /// <summary>
        /// UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("offerDraftUuid")]
        public string OfferDraftUuid { get; set; }

        /// <summary>
        /// Date for offer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Unique offer number generated by us.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("offerNumber")]
        public int OfferNumber { get; set; }

        /// <summary>
        /// Net amount (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// VAT amount (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vat")]
        public long Vat { get; set; }

        /// <summary>
        /// Gross amount (= net+VAT) (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        /// <summary>
        /// Comment/description
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Reference if sending invoice via EHF.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        /// <summary>
        /// The discount amount in the specified currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public double Discount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<InvoiceLineResult> Lines { get; set; }

        /// <summary>
        /// ISO 4217 currency code, default value is NOK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; } = "NOK";

        /// <summary>
        /// Contact associated with offer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public object ContactId { get; set; }

        /// <summary>
        /// Contact person associated with offer. Must belong to the provided contact.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonId")]
        public object ContactPersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public object ProjectId { get; set; }

        /// <summary>
        /// If order confirmation has been archived or not.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archived")]
        public bool Archived { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderConfirmation
    {
        /// <summary>
        /// offer ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmationId")]
        public long ConfirmationId { get; set; }

        /// <summary>
        /// UUID are represented as 32 hexadecimal (base-16) digits, displayed in 5 groups separated by hyphens, in the form 8-4-4-4-12 for a total of 36 characters.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmationDraftUuid")]
        public string ConfirmationDraftUuid { get; set; }

        /// <summary>
        /// Date for offer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Unique offer number generated by us.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmationNumber")]
        public int ConfirmationNumber { get; set; }

        /// <summary>
        /// Net amount (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("net")]
        public long Net { get; set; }

        /// <summary>
        /// VAT amount (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vat")]
        public long Vat { get; set; }

        /// <summary>
        /// Gross amount (= net+VAT) (in invoice currency) in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gross")]
        public long Gross { get; set; }

        /// <summary>
        /// Comment/description
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("comment")]
        public string Comment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Reference if sending invoice via EHF.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        /// <summary>
        /// The discount amount in the specified currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("discount")]
        public double Discount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public Address Address { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<InvoiceLineResult> Lines { get; set; }

        /// <summary>
        /// ISO 4217 currency code, default value is NOK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; } = "NOK";

        /// <summary>
        /// Contact associated with offer.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public object ContactId { get; set; }

        /// <summary>
        /// Contact person associated with the order confirmation. Must belong to given contact.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonId")]
        public object ContactPersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public object ProjectId { get; set; }

        /// <summary>
        /// If the order confirmation was used to create an invoice, the id of the associated invoice. Otherwise null is returned.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdInvoice")]
        public object CreatedInvoice { get; set; }

        /// <summary>
        /// If order confirmation has been archived or not.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("archived")]
        public bool Archived { get; set; } = false;

        /// <summary>
        /// Comment that is not shown on the order confirmation, but kept for internal use only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("internalComment")]
        public string InternalComment { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderLine
    {
        /// <summary>
        /// Description of the product or service.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Description { get; set; }

        /// <summary>
        /// Net amount of order line in cents. Either netPrice or netPriceInCurrency must be provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netPrice")]
        public long NetPrice { get; set; }

        /// <summary>
        /// VAT amount of order line in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vat")]
        public long Vat { get; set; }

        /// <summary>
        /// Expense account (kostnadskonto) associated with payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        public string Account { get; set; }

        /// <summary>
        /// Vat Types for SALES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, EXEMPT_IMPORT_EXPORT, EXEMPT, OUTSIDE, EXEMPT_REVERSE]
        /// <br/>Vat Types for PURCHASES: [NONE, HIGH, MEDIUM, RAW_FISH, LOW, HIGH_DIRECT, HIGH_BASIS, MEDIUM_DIRECT, MEDIUM_BASIS, NONE_IMPORT_BASIS,
        /// <br/>HIGH_FOREIGN_SERVICE_DEDUCTIBLE, HIGH_FOREIGN_SERVICE_NONDEDUCTIBLE, LOW_FOREIGN_SERVICE_DEDUCTIBLE,
        /// <br/>LOW_FOREIGN_SERVICE_NONDEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_DEDUCTIBLE, HIGH_PURCHASE_OF_EMISSIONSTRADING_OR_GOLD_NONDEDUCTIBLE]
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VatType { get; set; }

        /// <summary>
        /// Net amount in currency (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netPriceInCurrency")]
        public long NetPriceInCurrency { get; set; }

        /// <summary>
        /// VAT amount in currency (in cents)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatInCurrency")]
        public long VatInCurrency { get; set; }

        /// <summary>
        /// If a purchase is split over several projects, project/line can be specified. This field is only to be used for purchases.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartialCreditNoteRequest
    {
        /// <summary>
        /// Optional
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ourReference")]
        public string OurReference { get; set; }

        /// <summary>
        /// Optional - Your reference for invoice, free string format.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("yourReference")]
        public string YourReference { get; set; }

        /// <summary>
        /// Reference if sending via EHF.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderReference")]
        public string OrderReference { get; set; }

        /// <summary>
        /// Optional - Project associated with the credit note.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("project")]
        public long Project { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// Date that the credit note is issued, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issueDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset IssueDate { get; set; }

        /// <summary>
        /// Optional - Id of invoice that the credit note is associated with.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]
        public long InvoiceId { get; set; }

        /// <summary>
        /// Id of contact that the credit note is associated with.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public long ContactId { get; set; }

        /// <summary>
        /// Id of contact person that the credit note is associated with (Credit person must belong to the provided contact).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonId")]
        public long ContactPersonId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("creditNoteText")]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string CreditNoteText { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CreditNoteLineResult> Lines { get; set; } = new System.Collections.ObjectModel.Collection<CreditNoteLineResult>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Returns a payment object with additional fields currrencyAmount, currency, and fee if it is a foreign currency payment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Payment
    {
        /// <summary>
        /// Id of given payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentId")]
        public long PaymentId { get; set; }

        /// <summary>
        /// Payment date, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Account associated with payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Account { get; set; }

        /// <summary>
        /// Amount paid in the specified currency. If no currency is provided then currency defaults to "NOK". Formatted in cents (34000 = 340.00)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amount")]
        public long Amount { get; set; }

        /// <summary>
        /// Attribute of a foreign payment only. Is required if amount is provided in currency other than NOK and should be the actual amount that was received in the bank account. Formatted in cents (500000 = 5000.00)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("amountInNok")]
        public long AmountInNok { get; set; }

        /// <summary>
        /// Only specify the currency if other than "NOK", otherwise default currency is "NOK". ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// Any fees additional to the amount paid in the specified currency. This is always a "NOK" amount even if the sale currency is a different currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fee")]
        public long Fee { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Product
    {
        /// <summary>
        /// Product Id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("productId")]
        public long ProductId { get; set; }

        /// <summary>
        /// Date that product was created in Fiken, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// Date that product was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        /// <summary>
        /// Product name.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The net unit price in cents.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public long UnitPrice { get; set; }

        /// <summary>
        /// The accounting account that will receive the payment.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("incomeAccount")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IncomeAccount { get; set; }

        /// <summary>
        /// One of {"HIGH", "MEDIUM", "LOW", "EXEMPT", "EXEMPT_IMPORT_EXPORT", "EXEMPT_REVERSE", "OUTSIDE", "NONE"}. "HIGH" is the most common.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VatType { get; set; }

        /// <summary>
        /// If product is in use (True) or not (False).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public bool Active { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("productNumber")]
        public string ProductNumber { get; set; }

        /// <summary>
        /// Number of products available in stock. If not provided, stock value is set to null. Decimal values are accepted. For example 5.5
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stock")]
        public float Stock { get; set; }

        /// <summary>
        /// Optional field for additional information.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Note { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSalesLineInfo
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public long Count { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sales")]
        public long Sales { get; set; }

        /// <summary>
        /// Net amount excluding VAT in cents (5000 = 50.00)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        public long NetAmount { get; set; }

        /// <summary>
        /// VAT amount for sale in cents (500 = 5.00)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatAmount")]
        public long VatAmount { get; set; }

        /// <summary>
        /// Gross amount of sale (net + VAT) in cents (5500 = 55.00)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("grossAmount")]
        public long GrossAmount { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSalesReportRequest
    {
        /// <summary>
        /// Start date range for the report, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("from")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset From { get; set; }

        /// <summary>
        /// End date range for the report, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset To { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProductSalesReportResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("product")]
        public Product Product { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sold")]
        public ProductSalesLineInfo Sold { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("credited")]
        public ProductSalesLineInfo Credited { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("sum")]
        public ProductSalesLineInfo Sum { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Number { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Start date for the project, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// End date for the project, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public long ContactId { get; set; }

        /// <summary>
        /// Whether the project is completed or not.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed")]
        public bool Completed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProjectResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        public string Number { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Start date for the project, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// End date for the project, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contact")]
        public Contact Contact { get; set; }

        /// <summary>
        /// Whether the project is completed or not.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed")]
        public bool Completed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public long TransactionId { get; set; }

        /// <summary>
        /// Invoice/sale number or similar.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Payment date, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Due date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// Purchased with cash or through a supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PurchaseRequestKind Kind { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderLine> Lines { get; set; } = new System.Collections.ObjectModel.Collection<OrderLine>();

        /// <summary>
        /// Id of supplier if not a cash purchase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("supplierId")]
        public long SupplierId { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAccount")]
        public string PaymentAccount { get; set; }

        /// <summary>
        /// Payment date, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        /// <summary>
        /// Id of given project.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PurchaseResult
    {
        /// <summary>
        /// Id of given purchase.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("purchaseId")]
        public long PurchaseId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public long TransactionId { get; set; }

        /// <summary>
        /// Invoice/sale number or similar.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Payment date, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Due date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// Purchased with cash or through a supplier.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PurchaseResultKind Kind { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paid")]
        public bool Paid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderLine> Lines { get; set; } = new System.Collections.ObjectModel.Collection<OrderLine>();

        [System.Text.Json.Serialization.JsonPropertyName("supplier")]
        public Contact Supplier { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAccount")]
        public string PaymentAccount { get; set; }

        /// <summary>
        /// Payment date, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset PaymentDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("payments")]
        public System.Collections.Generic.ICollection<Payment> Payments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("purchaseAttachments")]
        public System.Collections.Generic.ICollection<Attachment> PurchaseAttachments { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("project")]
        public System.Collections.Generic.ICollection<ProjectResult> Project { get; set; }

        /// <summary>
        /// Whether the purchase has been deleted or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleRequest
    {
        /// <summary>
        /// Identifier for sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("saleNumber")]
        public string SaleNumber { get; set; }

        /// <summary>
        /// Date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Either cash_sale, invoice, or external_invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SaleRequestKind Kind { get; set; }

        /// <summary>
        /// Total amount paid in NOK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPaid")]
        public long TotalPaid { get; set; }

        /// <summary>
        /// Total amount paid in other currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPaidInCurrency")]
        public long TotalPaidInCurrency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<OrderLine> Lines { get; set; } = new System.Collections.ObjectModel.Collection<OrderLine>();

        /// <summary>
        /// customerId = contactId where customer = true
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public long CustomerId { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// Due date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAccount")]
        public string PaymentAccount { get; set; }

        /// <summary>
        /// Payment date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset PaymentDate { get; set; }

        /// <summary>
        /// Fee associated with payment of sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentFee")]
        public long PaymentFee { get; set; }

        /// <summary>
        /// Id of given project.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("projectId")]
        public long ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SaleResult
    {
        /// <summary>
        /// Sale Id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("saleId")]
        public long SaleId { get; set; }

        /// <summary>
        /// Date that the sale was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public long TransactionId { get; set; }

        /// <summary>
        /// Identifier for sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("saleNumber")]
        public string SaleNumber { get; set; }

        /// <summary>
        /// Due date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Date { get; set; }

        /// <summary>
        /// Either cash_sale, invoice, or external_invoice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kind")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SaleResultKind Kind { get; set; }

        /// <summary>
        /// Total net amount of the sale to be paid.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netAmount")]
        public long NetAmount { get; set; }

        /// <summary>
        /// VAT amount on sale.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("vatAmount")]
        public long VatAmount { get; set; }

        /// <summary>
        /// If the sale as been marked as settled (True) or not (False).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("settled")]
        public bool Settled { get; set; }

        /// <summary>
        /// Date the the sale was marked as settled, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("settledDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset SettledDate { get; set; }

        /// <summary>
        /// If a loss has been registered for this sale (tapsføring av salg).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("writeOff")]
        public bool WriteOff { get; set; }

        /// <summary>
        /// Total amount paid in NOK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPaid")]
        public long TotalPaid { get; set; }

        /// <summary>
        /// Total amount paid in other currency.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPaidInCurrency")]
        public long TotalPaidInCurrency { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("outstandingBalance")]
        public long OutstandingBalance { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lines")]
        public System.Collections.Generic.ICollection<OrderLine> Lines { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customer")]
        public Contact Customer { get; set; }

        /// <summary>
        /// ISO 4217 currency code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[A-Z]{3}$")]
        public string Currency { get; set; }

        /// <summary>
        /// Due date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset DueDate { get; set; }

        /// <summary>
        /// Norwegian KID number. Number from 2 to 25 digits long.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string Kid { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("paymentAccount")]
        public string PaymentAccount { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("salePayments")]
        public System.Collections.Generic.ICollection<Payment> SalePayments { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("saleAttachments")]
        public System.Collections.Generic.ICollection<Attachment> SaleAttachments { get; set; }

        /// <summary>
        /// Payment date of the invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("paymentDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset PaymentDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("project")]
        public ProjectResult Project { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        public System.Collections.Generic.ICollection<Note> Notes { get; set; }

        /// <summary>
        /// Whether the sale has been deleted or not
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deleted")]
        public bool Deleted { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendInvoiceishRequest
    {
        /// <summary>
        /// The method of sending. Has to be auto, email, ehf, efaktura, sms or letter.
        /// <br/>If several methods are provided they should be in prioritized order as Fiken will only send the invoice to 
        /// <br/>the first successful available method. Method "auto" tries available methods for given customer based on
        /// <br/>the information registered for the customer. The order of priority is EHF, eFaktura, Sms, and email.
        /// <br/>Method "letter" means physical letter, printed and sent by our postal service partner (extra charge per
        /// <br/>letter, available for recipient addresses in Norway only). The option "includeDocumentAttachments" is
        /// <br/>not supported by method "letter", attachments are not included even if this option is set.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("method")]

        // TODO(system.text.json): Add string enum item converter
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Method> Method { get; set; } = new System.Collections.ObjectModel.Collection<Method>();

        /// <summary>
        /// Whether the document's attachment should be included when sending (True) or not (False).
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("includeDocumentAttachments")]
        public bool IncludeDocumentAttachments { get; set; } = true;

        [System.Text.Json.Serialization.JsonPropertyName("recipientName")]
        public string RecipientName { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("recipientEmail")]
        public string RecipientEmail { get; set; }

        /// <summary>
        /// Additional message to send with document.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// document_link, attachment or auto. Defaults to auto which uses customer/company settings.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailSendOption")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public SendInvoiceishRequestEmailSendOption EmailSendOption { get; set; } = Fiken.Sdk.SendInvoiceishRequestEmailSendOption.Auto;

        /// <summary>
        /// If sending with emailSendOption = attachment, this merges them into a single document if true.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mergeInvoiceAndAttachments")]
        public bool MergeInvoiceAndAttachments { get; set; } = false;

        /// <summary>
        /// Brreg organization number. Defaults to the customers organization number if not provided.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("organizationNumber")]
        public string OrganizationNumber { get; set; }

        /// <summary>
        /// Defaults to the customers phone number. Format should include the country code. If a Norwegian phone number, the country code is not necessary.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mobileNumber")]
        public string MobileNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendCreditNoteRequest : SendInvoiceishRequest
    {
        /// <summary>
        /// Id of credit note to send.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("creditNoteId")]
        public long CreditNoteId { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SendInvoiceRequest : SendInvoiceishRequest
    {
        /// <summary>
        /// Id of invoice to send.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("invoiceId")]
        public long InvoiceId { get; set; }

    }

    /// <summary>
    /// Transaction result upon creation of a General Journal Entry
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transaction
    {

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]
        public long TransactionId { get; set; }

        /// <summary>
        /// Date that product was created in Fiken, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// Date that product was last modified in Fiken, format yyyy-mm-dd.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastModifiedDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset LastModifiedDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entries")]
        public System.Collections.Generic.ICollection<JournalEntry> Entries { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateInvoiceRequest
    {
        /// <summary>
        /// Due date of invoice, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("newDueDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset NewDueDate { get; set; }

        /// <summary>
        /// If the invoice was not sent using Fiken this can be set to "true"
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sentManually")]
        public bool SentManually { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UpdateProjectRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Start date for the project, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("startDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// End date for the project, inclusive, format yyyy-mm-dd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endDate")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset EndDate { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public long ContactId { get; set; }

        /// <summary>
        /// Whether the project is completed or not.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("completed")]
        public bool Completed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Userinfo
    {
        /// <summary>
        /// Name of the user.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Users email address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Sorts results in either ascending (asc) or descending (desc) order based on the parameter value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"createdDate asc")]
        CreatedDate_asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"createdDate desc")]
        CreatedDate_desc = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"name asc")]
        Name_asc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"name desc")]
        Name_desc = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"organizationNumber asc")]
        OrganizationNumber_asc = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"organizationNumber desc")]
        OrganizationNumber_desc = 5,

    }

    /// <summary>
    /// Sorts results in either ascending (asc) or descending (desc) order based on the parameter value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortBy2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"lastModified asc")]
        LastModified_asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"lastModified desc")]
        LastModified_desc = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"createdDate asc")]
        CreatedDate_asc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"createdDate desc")]
        CreatedDate_desc = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortBy3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"date asc")]
        Date_asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"date desc")]
        Date_desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SortBy4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"createdDate asc")]
        CreatedDate_asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"createdDate desc")]
        CreatedDate_desc = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"name asc")]
        Name_asc = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"name desc")]
        Name_desc = 3,

    }

    /// <summary>
    /// Filter documents based on their status. If not specified, all documents are returned.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Status
    {

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unused")]
        Unused = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"used")]
        Used = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AttachmentType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"reminder")]
        Reminder = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"unspecified")]
        Unspecified = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ocr")]
        Ocr = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"bank_statement")]
        Bank_statement = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BankAccountRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tax_deduction")]
        Tax_deduction = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"foreign")]
        Foreign = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"credit_card")]
        Credit_card = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BankAccountResultType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"normal")]
        Normal = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"tax_deduction")]
        Tax_deduction = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"foreign")]
        Foreign = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"credit_card")]
        Credit_card = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyVatType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"no")]
        No = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"yearly")]
        Yearly = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monthly")]
        Monthly = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"bi-monthly")]
        BiMonthly = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvoiceishDraftRequestType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cash_invoice")]
        Cash_invoice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"offer")]
        Offer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"order_confirmation")]
        Order_confirmation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"credit_note")]
        Credit_note = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum InvoiceishDraftResultType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"cash_invoice")]
        Cash_invoice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"offer")]
        Offer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"order_confirmation")]
        Order_confirmation = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"credit_note")]
        Credit_note = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"repeating_invoice")]
        Repeating_invoice = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DispatchResultDispatchType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ehf")]
        Ehf = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"letter")]
        Letter = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"vipps")]
        Vipps = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"efaktura")]
        Efaktura = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PurchaseRequestKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cash_purchase")]
        Cash_purchase = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"supplier")]
        Supplier = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PurchaseResultKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cash_purchase")]
        Cash_purchase = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"supplier")]
        Supplier = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SaleRequestKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cash_sale")]
        Cash_sale = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"external_invoice")]
        External_invoice = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SaleResultKind
    {

        [System.Runtime.Serialization.EnumMember(Value = @"cash_sale")]
        Cash_sale = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"invoice")]
        Invoice = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"external_invoice")]
        External_invoice = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Method
    {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ehf")]
        Ehf = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"efaktura")]
        Efaktura = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"letter")]
        Letter = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SendInvoiceishRequestEmailSendOption
    {

        [System.Runtime.Serialization.EnumMember(Value = @"document_link")]
        Document_link = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"attachment")]
        Attachment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625